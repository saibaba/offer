Help on package sqlalchemy:

NAME
    sqlalchemy

FILE
    /Library/Python/2.7/site-packages/sqlalchemy/__init__.py

DESCRIPTION
    # sqlalchemy/__init__.py
    # Copyright (C) 2005-2012 the SQLAlchemy authors and contributors <see AUTHORS file>
    #
    # This module is part of SQLAlchemy and is released under
    # the MIT License: http://www.opensource.org/licenses/mit-license.php

PACKAGE CONTENTS
    connectors (package)
    cprocessors
    cresultproxy
    databases (package)
    dialects (package)
    engine (package)
    event
    events
    exc
    ext (package)
    interfaces
    log
    orm (package)
    pool
    processors
    schema
    sql (package)
    types
    util (package)

SUBMODULES
    _sa_util
    exceptions

CLASSES
    sqlalchemy.events.SchemaEventTarget(__builtin__.object)
        sqlalchemy.schema.FetchedValue(sqlalchemy.schema._NotAColumnExpr, sqlalchemy.events.SchemaEventTarget)
            sqlalchemy.schema.DefaultClause
                sqlalchemy.schema.PassiveDefault
    sqlalchemy.schema.ColumnCollectionConstraint(sqlalchemy.schema.ColumnCollectionMixin, sqlalchemy.schema.Constraint)
        sqlalchemy.schema.PrimaryKeyConstraint
        sqlalchemy.schema.UniqueConstraint
    sqlalchemy.schema.ColumnCollectionMixin(__builtin__.object)
        sqlalchemy.schema.Index(sqlalchemy.schema.ColumnCollectionMixin, sqlalchemy.schema.SchemaItem)
    sqlalchemy.schema.DDLElement(sqlalchemy.sql.expression.Executable, sqlalchemy.sql.expression.ClauseElement)
        sqlalchemy.schema.DDL
    sqlalchemy.schema.DefaultGenerator(sqlalchemy.schema._NotAColumnExpr, sqlalchemy.schema.SchemaItem)
        sqlalchemy.schema.ColumnDefault
        sqlalchemy.schema.Sequence
    sqlalchemy.schema.SchemaItem(sqlalchemy.events.SchemaEventTarget, sqlalchemy.sql.visitors.Visitable)
        sqlalchemy.schema.Column(sqlalchemy.schema.SchemaItem, sqlalchemy.sql.expression.ColumnClause)
        sqlalchemy.schema.Constraint
            sqlalchemy.schema.CheckConstraint
            sqlalchemy.schema.ForeignKeyConstraint
        sqlalchemy.schema.ForeignKey
        sqlalchemy.schema.Index(sqlalchemy.schema.ColumnCollectionMixin, sqlalchemy.schema.SchemaItem)
        sqlalchemy.schema.MetaData
            sqlalchemy.schema.ThreadLocalMetaData
        sqlalchemy.schema.Table(sqlalchemy.schema.SchemaItem, sqlalchemy.sql.expression.TableClause)
    sqlalchemy.schema._NotAColumnExpr(__builtin__.object)
        sqlalchemy.schema.FetchedValue(sqlalchemy.schema._NotAColumnExpr, sqlalchemy.events.SchemaEventTarget)
            sqlalchemy.schema.DefaultClause
                sqlalchemy.schema.PassiveDefault
    sqlalchemy.sql.expression.ColumnClause(sqlalchemy.sql.expression._Immutable, sqlalchemy.sql.expression.ColumnElement)
        sqlalchemy.schema.Column(sqlalchemy.schema.SchemaItem, sqlalchemy.sql.expression.ColumnClause)
    sqlalchemy.sql.expression.TableClause(sqlalchemy.sql.expression._Immutable, sqlalchemy.sql.expression.FromClause)
        sqlalchemy.schema.Table(sqlalchemy.schema.SchemaItem, sqlalchemy.sql.expression.TableClause)
    sqlalchemy.types.Concatenable(__builtin__.object)
        sqlalchemy.types.String(sqlalchemy.types.Concatenable, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.CHAR
            sqlalchemy.types.Enum(sqlalchemy.types.String, sqlalchemy.types.SchemaType)
            sqlalchemy.types.Text
                sqlalchemy.types.CLOB
                sqlalchemy.types.TEXT
                sqlalchemy.types.UnicodeText
            sqlalchemy.types.Unicode
                sqlalchemy.types.NCHAR
                sqlalchemy.types.NVARCHAR
            sqlalchemy.types.VARCHAR
    sqlalchemy.types.MutableType(__builtin__.object)
        sqlalchemy.types.PickleType(sqlalchemy.types.MutableType, sqlalchemy.types.TypeDecorator)
    sqlalchemy.types.SchemaType(sqlalchemy.events.SchemaEventTarget)
        sqlalchemy.types.Boolean(sqlalchemy.types.TypeEngine, sqlalchemy.types.SchemaType)
            sqlalchemy.types.BOOLEAN
    sqlalchemy.types.TypeEngine(sqlalchemy.types.AbstractType)
        sqlalchemy.types.Boolean(sqlalchemy.types.TypeEngine, sqlalchemy.types.SchemaType)
            sqlalchemy.types.BOOLEAN
        sqlalchemy.types.Date(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.DATE
        sqlalchemy.types.DateTime(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.DATETIME
            sqlalchemy.types.TIMESTAMP
        sqlalchemy.types.Integer(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.BigInteger
                sqlalchemy.types.BIGINT
            sqlalchemy.types.INTEGER
            sqlalchemy.types.INTEGER
            sqlalchemy.types.SmallInteger
                sqlalchemy.types.SMALLINT
        sqlalchemy.types.Numeric(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.DECIMAL
            sqlalchemy.types.Float
                sqlalchemy.types.FLOAT
                sqlalchemy.types.REAL
            sqlalchemy.types.NUMERIC
        sqlalchemy.types.String(sqlalchemy.types.Concatenable, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.CHAR
            sqlalchemy.types.Enum(sqlalchemy.types.String, sqlalchemy.types.SchemaType)
            sqlalchemy.types.Text
                sqlalchemy.types.CLOB
                sqlalchemy.types.TEXT
                sqlalchemy.types.UnicodeText
            sqlalchemy.types.Unicode
                sqlalchemy.types.NCHAR
                sqlalchemy.types.NVARCHAR
            sqlalchemy.types.VARCHAR
        sqlalchemy.types.Time(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.TIME
        sqlalchemy.types.TypeDecorator
            sqlalchemy.types.Interval(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeDecorator)
            sqlalchemy.types.PickleType(sqlalchemy.types.MutableType, sqlalchemy.types.TypeDecorator)
    sqlalchemy.types._Binary(sqlalchemy.types.TypeEngine)
        sqlalchemy.types.BINARY
        sqlalchemy.types.LargeBinary
            sqlalchemy.types.BLOB
            sqlalchemy.types.Binary
        sqlalchemy.types.VARBINARY
    sqlalchemy.types._DateAffinity(__builtin__.object)
        sqlalchemy.types.Date(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.DATE
        sqlalchemy.types.DateTime(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.DATETIME
            sqlalchemy.types.TIMESTAMP
        sqlalchemy.types.Integer(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.BigInteger
                sqlalchemy.types.BIGINT
            sqlalchemy.types.INTEGER
            sqlalchemy.types.INTEGER
            sqlalchemy.types.SmallInteger
                sqlalchemy.types.SMALLINT
        sqlalchemy.types.Interval(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeDecorator)
        sqlalchemy.types.Numeric(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.DECIMAL
            sqlalchemy.types.Float
                sqlalchemy.types.FLOAT
                sqlalchemy.types.REAL
            sqlalchemy.types.NUMERIC
        sqlalchemy.types.Time(sqlalchemy.types._DateAffinity, sqlalchemy.types.TypeEngine)
            sqlalchemy.types.TIME
    
    class BIGINT(BigInteger)
     |  The SQL BIGINT type.
     |  
     |  Method resolution order:
     |      BIGINT
     |      BigInteger
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BIGINT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class BINARY(_Binary)
     |  The SQL BINARY type.
     |  
     |  Method resolution order:
     |      BINARY
     |      _Binary
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BINARY'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  __init__(self, length=None)
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |      # Python 3 has native bytes() type 
     |      # both sqlite3 and pg8000 seem to return it
     |      # (i.e. and not 'memoryview')
     |      # Py2K
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class BLOB(LargeBinary)
     |  The SQL BLOB type.
     |  
     |  Method resolution order:
     |      BLOB
     |      LargeBinary
     |      _Binary
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BLOB'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from LargeBinary:
     |  
     |  __init__(self, length=None)
     |      Construct a LargeBinary type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements, for those BLOB types that accept a length
     |        (i.e. MySQL).  It does *not* produce a small BINARY/VARBINARY
     |        type - use the BINARY/VARBINARY types specifically for those.
     |        May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        *length* for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |      # Python 3 has native bytes() type 
     |      # both sqlite3 and pg8000 seem to return it
     |      # (i.e. and not 'memoryview')
     |      # Py2K
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class BOOLEAN(Boolean)
     |  The SQL BOOLEAN type.
     |  
     |  Method resolution order:
     |      BOOLEAN
     |      Boolean
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      SchemaType
     |      sqlalchemy.events.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'BOOLEAN'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Boolean:
     |  
     |  __init__(self, create_constraint=True, name=None)
     |      Construct a Boolean.
     |      
     |      :param create_constraint: defaults to True.  If the boolean 
     |        is generated as an int/smallint, also create a CHECK constraint
     |        on the table that ensures 1 or 0 as a value.
     |      
     |      :param name: if a CHECK constraint is generated, specify
     |        the name of the constraint.
     |  
     |  bind_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Boolean:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the corresponding type object from the underlying DB-API, if
     |      any.
     |      
     |       This can be useful for calling ``setinputsizes()``, for example.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaType:
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue CREATE ddl for this type, if applicable.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue DROP ddl for this type, if applicable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaType:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
    
    class BigInteger(Integer)
     |  A type for bigger ``int`` integers.
     |  
     |  Typically generates a ``BIGINT`` in DDL, and otherwise acts like
     |  a normal :class:`.Integer` on the Python side.
     |  
     |  Method resolution order:
     |      BigInteger
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'big_integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Binary(LargeBinary)
     |  Deprecated.  Renamed to LargeBinary.
     |  
     |  Method resolution order:
     |      Binary
     |      LargeBinary
     |      _Binary
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *arg, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from LargeBinary:
     |  
     |  __visit_name__ = 'large_binary'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |      # Python 3 has native bytes() type 
     |      # both sqlite3 and pg8000 seem to return it
     |      # (i.e. and not 'memoryview')
     |      # Py2K
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Boolean(TypeEngine, SchemaType)
     |  A bool datatype.
     |  
     |  Boolean typically uses BOOLEAN or SMALLINT on the DDL side, and on
     |  the Python side deals in ``True`` or ``False``.
     |  
     |  Method resolution order:
     |      Boolean
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      SchemaType
     |      sqlalchemy.events.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, create_constraint=True, name=None)
     |      Construct a Boolean.
     |      
     |      :param create_constraint: defaults to True.  If the boolean 
     |        is generated as an int/smallint, also create a CHECK constraint
     |        on the table that ensures 1 or 0 as a value.
     |      
     |      :param name: if a CHECK constraint is generated, specify
     |        the name of the constraint.
     |  
     |  bind_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'boolean'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the corresponding type object from the underlying DB-API, if
     |      any.
     |      
     |       This can be useful for calling ``setinputsizes()``, for example.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaType:
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue CREATE ddl for this type, if applicable.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue DROP ddl for this type, if applicable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaType:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
    
    class CHAR(String)
     |  The SQL CHAR type.
     |  
     |  Method resolution order:
     |      CHAR
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'CHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, convert_unicode=False, assert_unicode=None, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param convert_unicode: When set to ``True``, the 
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the 
     |        value of the ``encoding`` parameter passed to 
     |        :func:`.create_engine` as the encoding.
     |        
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not 
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`UnicodeText` 
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but 
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param assert_unicode: Deprecated.  A warning is emitted 
     |        when a non-``unicode`` object is passed to the 
     |        :class:`.Unicode` subtype of :class:`.String`, 
     |        or the :class:`.UnicodeText` subtype of :class:`.Text`.   
     |        See :class:`.Unicode` for information on how to 
     |        control this warning.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class CLOB(Text)
     |  The CLOB type.
     |  
     |  This type is found in Oracle and Informix.
     |  
     |  Method resolution order:
     |      CLOB
     |      Text
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'CLOB'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, convert_unicode=False, assert_unicode=None, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param convert_unicode: When set to ``True``, the 
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the 
     |        value of the ``encoding`` parameter passed to 
     |        :func:`.create_engine` as the encoding.
     |        
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not 
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`UnicodeText` 
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but 
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param assert_unicode: Deprecated.  A warning is emitted 
     |        when a non-``unicode`` object is passed to the 
     |        :class:`.Unicode` subtype of :class:`.String`, 
     |        or the :class:`.UnicodeText` subtype of :class:`.Text`.   
     |        See :class:`.Unicode` for information on how to 
     |        control this warning.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class CheckConstraint(Constraint)
     |  A table- or column-level CHECK constraint.
     |  
     |  Can be included in the definition of a Table or Column.
     |  
     |  Method resolution order:
     |      CheckConstraint
     |      Constraint
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, sqltext, name=None, deferrable=None, initially=None, table=None, _create_rule=None)
     |      Construct a CHECK constraint.
     |      
     |      :param sqltext:
     |        A string containing the constraint definition, which will be used
     |        verbatim, or a SQL expression construct.
     |      
     |      :param name:
     |        Optional, the in-database name of the constraint.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __visit_name__
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Column(SchemaItem, sqlalchemy.sql.expression.ColumnClause)
     |  Represents a column in a database table.
     |  
     |  Method resolution order:
     |      Column
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.expression.ColumnClause
     |      sqlalchemy.sql.expression._Immutable
     |      sqlalchemy.sql.expression.ColumnElement
     |      sqlalchemy.sql.expression.ClauseElement
     |      sqlalchemy.sql.visitors.Visitable
     |      sqlalchemy.sql.expression._CompareMixin
     |      sqlalchemy.sql.operators.ColumnOperators
     |      sqlalchemy.sql.operators.Operators
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kwargs)
     |      Construct a new ``Column`` object.
     |      
     |      :param name: The name of this column as represented in the database. 
     |        This argument may be the first positional argument, or specified
     |        via keyword.
     |      
     |        Names which contain no upper case characters
     |        will be treated as case insensitive names, and will not be quoted
     |        unless they are a reserved word.  Names with any number of upper
     |        case characters will be quoted and sent exactly.  Note that this
     |        behavior applies even for databases which standardize upper 
     |        case names as case insensitive such as Oracle.
     |      
     |        The name field may be omitted at construction time and applied
     |        later, at any time before the Column is associated with a 
     |        :class:`.Table`.  This is to support convenient
     |        usage within the :mod:`~sqlalchemy.ext.declarative` extension.
     |      
     |      :param type\_: The column's type, indicated using an instance which 
     |        subclasses :class:`~sqlalchemy.types.TypeEngine`.  If no arguments
     |        are required for the type, the class of the type can be sent
     |        as well, e.g.::
     |      
     |          # use a type with arguments
     |          Column('data', String(50))
     |      
     |          # use no arguments
     |          Column('level', Integer)
     |      
     |        The ``type`` argument may be the second positional argument
     |        or specified by keyword.
     |      
     |        There is partial support for automatic detection of the 
     |        type based on that of a :class:`.ForeignKey` associated 
     |        with this column, if the type is specified as ``None``. 
     |        However, this feature is not fully implemented and 
     |        may not function in all cases.
     |      
     |      :param \*args: Additional positional arguments include various 
     |        :class:`.SchemaItem` derived constructs which will be applied 
     |        as options to the column.  These include instances of 
     |        :class:`.Constraint`, :class:`.ForeignKey`, :class:`.ColumnDefault`, 
     |        and :class:`.Sequence`.  In some cases an equivalent keyword 
     |        argument is available such as ``server_default``, ``default``
     |        and ``unique``.
     |      
     |      :param autoincrement: This flag may be set to ``False`` to 
     |        indicate an integer primary key column that should not be
     |        considered to be the "autoincrement" column, that is
     |        the integer primary key column which generates values 
     |        implicitly upon INSERT and whose value is usually returned
     |        via the DBAPI cursor.lastrowid attribute.   It defaults
     |        to ``True`` to satisfy the common use case of a table
     |        with a single integer primary key column.  If the table
     |        has a composite primary key consisting of more than one
     |        integer column, set this flag to True only on the 
     |        column that should be considered "autoincrement".
     |      
     |        The setting *only* has an effect for columns which are:
     |      
     |        * Integer derived (i.e. INT, SMALLINT, BIGINT).
     |      
     |        * Part of the primary key
     |      
     |        * Are not referenced by any foreign keys, unless
     |          the value is specified as ``'ignore_fk'``
     |      
     |          .. versionadded:: 0.7.4
     |      
     |        * have no server side or client side defaults (with the exception
     |          of Postgresql SERIAL).
     |      
     |        The setting has these two effects on columns that meet the
     |        above criteria:
     |      
     |        * DDL issued for the column will include database-specific
     |          keywords intended to signify this column as an
     |          "autoincrement" column, such as AUTO INCREMENT on MySQL,
     |          SERIAL on Postgresql, and IDENTITY on MS-SQL.  It does 
     |          *not* issue AUTOINCREMENT for SQLite since this is a
     |          special SQLite flag that is not required for autoincrementing
     |          behavior.  See the SQLite dialect documentation for
     |          information on SQLite's AUTOINCREMENT.
     |      
     |        * The column will be considered to be available as 
     |          cursor.lastrowid or equivalent, for those dialects which
     |          "post fetch" newly inserted identifiers after a row has
     |          been inserted (SQLite, MySQL, MS-SQL).  It does not have 
     |          any effect in this regard for databases that use sequences 
     |          to generate primary key identifiers (i.e. Firebird, Postgresql, 
     |          Oracle).
     |      
     |        .. versionchanged:: 0.7.4
     |            ``autoincrement`` accepts a special value ``'ignore_fk'``
     |            to indicate that autoincrementing status regardless of foreign key
     |            references.  This applies to certain composite foreign key
     |            setups, such as the one demonstrated in the ORM documentation
     |            at :ref:`post_update`.
     |      
     |      :param default: A scalar, Python callable, or
     |          :class:`~sqlalchemy.sql.expression.ClauseElement` representing the
     |          *default value* for this column, which will be invoked upon insert
     |          if this column is otherwise not specified in the VALUES clause of
     |          the insert. This is a shortcut to using :class:`.ColumnDefault` as
     |          a positional argument.
     |      
     |          Contrast this argument to ``server_default`` which creates a 
     |          default generator on the database side.
     |      
     |      :param doc: optional String that can be used by the ORM or similar
     |          to document attributes.   This attribute does not render SQL
     |          comments (a future attribute 'comment' will achieve that).
     |      
     |      :param key: An optional string identifier which will identify this
     |          ``Column`` object on the :class:`.Table`. When a key is provided,
     |          this is the only identifier referencing the ``Column`` within the
     |          application, including ORM attribute mapping; the ``name`` field
     |          is used only when rendering SQL.
     |      
     |      :param index: When ``True``, indicates that the column is indexed.
     |          This is a shortcut for using a :class:`.Index` construct on the
     |          table. To specify indexes with explicit names or indexes that
     |          contain multiple columns, use the :class:`.Index` construct
     |          instead.
     |      
     |      :param info: A dictionary which defaults to ``{}``. A space to store
     |          application specific data. This must be a dictionary.
     |      
     |      :param nullable: If set to the default of ``True``, indicates the 
     |          column will be rendered as allowing NULL, else it's rendered as
     |          NOT NULL. This parameter is only used when issuing CREATE TABLE
     |          statements.
     |      
     |      :param onupdate: A scalar, Python callable, or
     |          :class:`~sqlalchemy.sql.expression.ClauseElement` representing a
     |          default value to be applied to the column within UPDATE
     |          statements, which wil be invoked upon update if this column is not
     |          present in the SET clause of the update. This is a shortcut to
     |          using :class:`.ColumnDefault` as a positional argument with
     |          ``for_update=True``.
     |      
     |      :param primary_key: If ``True``, marks this column as a primary key
     |          column. Multiple columns can have this flag set to specify
     |          composite primary keys. As an alternative, the primary key of a
     |          :class:`.Table` can be specified via an explicit
     |          :class:`.PrimaryKeyConstraint` object.
     |      
     |      :param server_default: A :class:`.FetchedValue` instance, str, Unicode
     |          or :func:`~sqlalchemy.sql.expression.text` construct representing
     |          the DDL DEFAULT value for the column.
     |      
     |          String types will be emitted as-is, surrounded by single quotes::
     |      
     |              Column('x', Text, server_default="val")
     |      
     |              x TEXT DEFAULT 'val'
     |      
     |          A :func:`~sqlalchemy.sql.expression.text` expression will be
     |          rendered as-is, without quotes::
     |      
     |              Column('y', DateTime, server_default=text('NOW()'))0
     |      
     |              y DATETIME DEFAULT NOW()
     |      
     |          Strings and text() will be converted into a :class:`.DefaultClause`
     |          object upon initialization.
     |      
     |          Use :class:`.FetchedValue` to indicate that an already-existing
     |          column will generate a default value on the database side which
     |          will be available to SQLAlchemy for post-fetch after inserts. This
     |          construct does not specify any DDL and the implementation is left
     |          to the database, such as via a trigger.
     |      
     |      :param server_onupdate:   A :class:`.FetchedValue` instance
     |           representing a database-side default generation function. This
     |           indicates to SQLAlchemy that a newly generated value will be
     |           available after updates. This construct does not specify any DDL
     |           and the implementation is left to the database, such as via a
     |           trigger.
     |      
     |      :param quote: Force quoting of this column's name on or off,
     |           corresponding to ``True`` or ``False``. When left at its default
     |           of ``None``, the column identifier will be quoted according to
     |           whether the name is case sensitive (identifiers with at least one
     |           upper case character are treated as case sensitive), or if it's a
     |           reserved word. This flag is only needed to force quoting of a
     |           reserved word which is not known by the SQLAlchemy dialect.
     |      
     |      :param unique: When ``True``, indicates that this column contains a
     |           unique constraint, or if ``index`` is ``True`` as well, indicates
     |           that the :class:`.Index` should be created with the unique flag.
     |           To specify multiple columns in the constraint/index or to specify
     |           an explicit name, use the :class:`.UniqueConstraint` or
     |           :class:`.Index` constructs explicitly.
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  append_foreign_key(self, fk)
     |  
     |  copy(self, **kw)
     |      Create a copy of this ``Column``, unitialized.
     |      
     |      This is used in ``Table.tometadata``.
     |  
     |  get_children(self, schema_visitor=False, **kwargs)
     |  
     |  references(self, column)
     |      Return True if this Column references the given column via foreign
     |      key.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'column'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.ColumnClause:
     |  
     |  description(...)
     |  
     |  label(self, name)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.expression.ColumnClause:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.ColumnClause:
     |  
     |  default = None
     |  
     |  onupdate = None
     |  
     |  server_default = None
     |  
     |  server_onupdate = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression._Immutable:
     |  
     |  params(self, *optionaldict, **kwargs)
     |  
     |  unique_params(self, *optionaldict, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.ColumnElement:
     |  
     |  anon_label(...)
     |      provides a constant 'anonymous label' for this ColumnElement.
     |      
     |      This is a label() expression which will be named at compile time.
     |      The same label() is returned each time anon_label is called so
     |      that expressions can reference anon_label multiple times, producing
     |      the same label name at compile time.
     |      
     |      the compiler uses this function automatically at compile time
     |      for expressions that are known to be 'unnamed' like binary
     |      expressions and function calls.
     |  
     |  base_columns(...)
     |  
     |  compare(self, other, use_proxies=False, equivalents=None, **kw)
     |      Compare this ColumnElement to another.
     |      
     |      Special arguments understood:
     |      
     |      :param use_proxies: when True, consider two columns that
     |        share a common base column as equivalent (i.e. shares_lineage())
     |      
     |      :param equivalents: a dictionary of columns as keys mapped to sets
     |        of columns. If the given "other" column is present in this
     |        dictionary, if any of the columns in the corresponding set() pass the
     |        comparison test, the result is True. This is used to expand the
     |        comparison to other columns that may be known to be equivalent to
     |        this one via foreign key or other criterion.
     |  
     |  proxy_set(...)
     |  
     |  shares_lineage(self, othercolumn)
     |      Return True if the given :class:`.ColumnElement` 
     |      has a common ancestor to this :class:`.ColumnElement`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.ColumnElement:
     |  
     |  foreign_keys = []
     |  
     |  primary_key = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.ClauseElement:
     |  
     |  __and__(self, other)
     |  
     |  __getstate__(self)
     |  
     |  __invert__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __or__(self, other)
     |  
     |  compile(self, bind=None, dialect=None, **kw)
     |      Compile this SQL expression.
     |      
     |      The return value is a :class:`~sqlalchemy.engine.Compiled` object.
     |      Calling ``str()`` or ``unicode()`` on the returned value will yield a
     |      string representation of the result. The
     |      :class:`~sqlalchemy.engine.Compiled` object also can return a
     |      dictionary of bind parameter names and values
     |      using the ``params`` accessor.
     |      
     |      :param bind: An ``Engine`` or ``Connection`` from which a
     |          ``Compiled`` will be acquired. This argument takes precedence over
     |          this :class:`.ClauseElement`'s bound engine, if any.
     |      
     |      :param column_keys: Used for INSERT and UPDATE statements, a list of
     |          column names which should be present in the VALUES clause of the
     |          compiled statement. If ``None``, all columns from the target table
     |          object are rendered.
     |      
     |      :param dialect: A ``Dialect`` instance from which a ``Compiled``
     |          will be acquired. This argument takes precedence over the `bind`
     |          argument as well as this :class:`.ClauseElement`'s bound engine, if
     |          any.
     |      
     |      :param inline: Used for INSERT statements, for a dialect which does
     |          not support inline retrieval of newly generated primary key
     |          columns, will force the expression used to create the new primary
     |          key value to be rendered inline within the INSERT statement's
     |          VALUES clause. This typically refers to Sequence execution but may
     |          also refer to any server-side default generation function
     |          associated with a primary key `Column`.
     |  
     |  execute(self, *multiparams, **params)
     |      Compile and execute this :class:`.ClauseElement`.
     |      
     |      .. deprecated:: 0.7 Only SQL expressions which subclass :class:`.Executable` may provide the :func:`.execute` method.
     |  
     |  scalar(self, *multiparams, **params)
     |      Compile and execute this :class:`.ClauseElement`, returning
     |      
     |      .. deprecated:: 0.7 Only SQL expressions which subclass :class:`.Executable` may provide the :func:`.scalar` method.
     |      the result's scalar representation.
     |  
     |  self_group(self, against=None)
     |      Apply a 'grouping' to this :class:`.ClauseElement`.
     |      
     |      This method is overridden by subclasses to return a 
     |      "grouping" construct, i.e. parenthesis.   In particular
     |      it's used by "binary" expressions to provide a grouping
     |      around themselves when placed into a larger expression, 
     |      as well as by :func:`.select` constructs when placed into
     |      the FROM clause of another :func:`.select`.  (Note that 
     |      subqueries should be normally created using the 
     |      :func:`.Select.alias` method, as many platforms require
     |      nested SELECT statements to be named).
     |      
     |      As expressions are composed together, the application of
     |      :meth:`self_group` is automatic - end-user code should never 
     |      need to use this method directly.  Note that SQLAlchemy's
     |      clause constructs take operator precedence into account - 
     |      so parenthesis might not be needed, for example, in 
     |      an expression like ``x OR (y AND z)`` - AND takes precedence
     |      over OR.
     |      
     |      The base :meth:`self_group` method of :class:`.ClauseElement`
     |      just returns self.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.ClauseElement:
     |  
     |  bind = None
     |  
     |  supports_execution = False
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression._CompareMixin:
     |  
     |  __neg__(self)
     |      See :meth:`.ColumnOperators.__neg__`.
     |  
     |  asc(self)
     |      See :meth:`.ColumnOperators.asc`.
     |  
     |  between(self, cleft, cright)
     |      See :meth:`.ColumnOperators.between`.
     |  
     |  collate(self, collation)
     |      See :meth:`.ColumnOperators.collate`.
     |  
     |  contains(self, other, escape=None)
     |      See :meth:`.ColumnOperators.contains`.
     |  
     |  desc(self)
     |      See :meth:`.ColumnOperators.desc`.
     |  
     |  distinct(self)
     |      See :meth:`.ColumnOperators.distinct`.
     |  
     |  endswith(self, other, escape=None)
     |      See :meth:`.ColumnOperators.endswith`.
     |  
     |  in_(self, other)
     |      See :meth:`.ColumnOperators.in_`.
     |  
     |  match(self, other)
     |      See :meth:`.ColumnOperators.match`.
     |  
     |  nullsfirst(self)
     |      See :meth:`.ColumnOperators.nullsfirst`.
     |  
     |  nullslast(self)
     |      See :meth:`.ColumnOperators.nullslast`.
     |  
     |  op(self, operator)
     |      See :meth:`.ColumnOperators.op`.
     |  
     |  operate(self, op, *other, **kwargs)
     |  
     |  reverse_operate(self, op, other, **kwargs)
     |  
     |  startswith(self, other, escape=None)
     |      See :meth:`.ColumnOperators.startswith`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression._CompareMixin:
     |  
     |  operators = {<built-in function add>: (<function __operate>,), <built-...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.operators.ColumnOperators:
     |  
     |  __add__(self, other)
     |      Implement the ``+`` operator.
     |      
     |      In a column context, produces the clause ``a + b``
     |      if the parent object has non-string affinity.
     |      If the parent object has a string affinity, 
     |      produces the concatenation operator, ``a || b`` -
     |      see :meth:`concat`.
     |  
     |  __div__(self, other)
     |      Implement the ``/`` operator.
     |      
     |      In a column context, produces the clause ``a / b``.
     |  
     |  __eq__(self, other)
     |      Implement the ``==`` operator.
     |      
     |      In a column context, produces the clause ``a = b``.
     |      If the target is ``None``, produces ``a IS NULL``.
     |  
     |  __ge__(self, other)
     |      Implement the ``>=`` operator.
     |      
     |      In a column context, produces the clause ``a >= b``.
     |  
     |  __gt__(self, other)
     |      Implement the ``>`` operator.
     |      
     |      In a column context, produces the clause ``a > b``.
     |  
     |  __le__(self, other)
     |      Implement the ``<=`` operator.
     |      
     |      In a column context, produces the clause ``a <= b``.
     |  
     |  __lt__(self, other)
     |      Implement the ``<`` operator.
     |      
     |      In a column context, produces the clause ``a < b``.
     |  
     |  __mod__(self, other)
     |      Implement the ``%`` operator.
     |      
     |      In a column context, produces the clause ``a % b``.
     |  
     |  __mul__(self, other)
     |      Implement the ``*`` operator.
     |      
     |      In a column context, produces the clause ``a * b``.
     |  
     |  __ne__(self, other)
     |      Implement the ``!=`` operator.
     |      
     |      In a column context, produces the clause ``a != b``.
     |      If the target is ``None``, produces ``a IS NOT NULL``.
     |  
     |  __radd__(self, other)
     |      Implement the ``+`` operator in reverse.
     |      
     |      See :meth:`__add__`.
     |  
     |  __rdiv__(self, other)
     |      Implement the ``/`` operator in reverse.
     |      
     |      See :meth:`__div__`.
     |  
     |  __rmul__(self, other)
     |      Implement the ``*`` operator in reverse.
     |      
     |      See :meth:`__mul__`.
     |  
     |  __rsub__(self, other)
     |      Implement the ``-`` operator in reverse.
     |      
     |      See :meth:`__sub__`.
     |  
     |  __rtruediv__(self, other)
     |      Implement the ``//`` operator in reverse.
     |      
     |      See :meth:`__truediv__`.
     |  
     |  __sub__(self, other)
     |      Implement the ``-`` operator.
     |      
     |      In a column context, produces the clause ``a - b``.
     |  
     |  __truediv__(self, other)
     |      Implement the ``//`` operator.
     |      
     |      In a column context, produces the clause ``a / b``.
     |  
     |  concat(self, other)
     |      Implement the 'concat' operator.
     |      
     |      In a column context, produces the clause ``a || b``,
     |      or uses the ``concat()`` operator on MySQL.
     |  
     |  ilike(self, other, escape=None)
     |      Implement the ``ilike`` operator.
     |      
     |      In a column context, produces the clause ``a ILIKE other``.
     |  
     |  like(self, other, escape=None)
     |      Implement the ``like`` operator.
     |      
     |      In a column context, produces the clause ``a LIKE other``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.operators.ColumnOperators:
     |  
     |  timetuple = None
    
    class ColumnDefault(DefaultGenerator)
     |  A plain default value on a column.
     |  
     |  This could correspond to a constant, a callable function, 
     |  or a SQL clause.
     |  
     |  :class:`.ColumnDefault` is generated automatically
     |  whenever the ``default``, ``onupdate`` arguments of
     |  :class:`.Column` are used.  A :class:`.ColumnDefault`
     |  can be passed positionally as well.
     |  
     |  For example, the following::
     |  
     |      Column('foo', Integer, default=50)
     |  
     |  Is equivalent to::
     |  
     |      Column('foo', Integer, ColumnDefault(50))
     |  
     |  Method resolution order:
     |      ColumnDefault
     |      DefaultGenerator
     |      _NotAColumnExpr
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, arg, **kwargs)
     |  
     |  __repr__(self)
     |  
     |  is_callable(...)
     |  
     |  is_clause_element(...)
     |  
     |  is_scalar(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __visit_name__
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultGenerator:
     |  
     |  execute(self, bind=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DefaultGenerator:
     |  
     |  bind
     |      Return the connectable associated with this default.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DefaultGenerator:
     |  
     |  column = None
     |  
     |  is_sequence = False
     |  
     |  is_server_default = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Constraint(SchemaItem)
     |  A table-level SQL constraint.
     |  
     |  Method resolution order:
     |      Constraint
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name=None, deferrable=None, initially=None, _create_rule=None, **kw)
     |      Create a SQL constraint.
     |      
     |      :param name:
     |        Optional, the in-database name of this ``Constraint``.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |      
     |      :param _create_rule:
     |        a callable which is passed the DDLCompiler object during
     |        compilation. Returns True or False to signal inline generation of
     |        this Constraint.
     |      
     |        The AddConstraint and DropConstraint DDL constructs provide
     |        DDLElement's more comprehensive "conditional DDL" approach that is
     |        passed a database connection when DDL is being issued. _create_rule
     |        is instead called during any CREATE TABLE compilation, where there
     |        may not be any transaction/connection in progress. However, it
     |        allows conditional compilation of the constraint even for backends
     |        which do not support addition of constraints through ALTER TABLE,
     |        which currently includes SQLite.
     |      
     |        _create_rule is used by some types to create constraints.
     |        Currently, its call signature is subject to change at any time.
     |      
     |      :param \**kwargs: 
     |        Dialect-specific keyword parameters, see the documentation
     |        for various dialects and constraints regarding options here.
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class DATE(Date)
     |  The SQL DATE type.
     |  
     |  Method resolution order:
     |      DATE
     |      Date
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'DATE'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Date:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Date:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class DATETIME(DateTime)
     |  The SQL DATETIME type.
     |  
     |  Method resolution order:
     |      DATETIME
     |      DateTime
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'DATETIME'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateTime:
     |  
     |  __init__(self, timezone=False)
     |      Construct a new :class:`.DateTime`.
     |      
     |      :param timezone: boolean.  If True, and supported by the
     |      backend, will produce 'TIMESTAMP WITH TIMEZONE'. For backends
     |      that don't support timezone aware timestamps, has no
     |      effect.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTime:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class DDL(DDLElement)
     |  A literal DDL statement.
     |  
     |  Specifies literal SQL DDL to be executed by the database.  DDL objects 
     |  function as DDL event listeners, and can be subscribed to those events
     |  listed in :class:`.DDLEvents`, using either :class:`.Table` or :class:`.MetaData`
     |  objects as targets.   Basic templating support allows a single DDL instance 
     |  to handle repetitive tasks for multiple tables.
     |  
     |  Examples::
     |  
     |    from sqlalchemy import event, DDL
     |  
     |    tbl = Table('users', metadata, Column('uid', Integer))
     |    event.listen(tbl, 'before_create', DDL('DROP TRIGGER users_trigger'))
     |  
     |    spow = DDL('ALTER TABLE %(table)s SET secretpowers TRUE')
     |    event.listen(tbl, 'after_create', spow.execute_if(dialect='somedb'))
     |  
     |    drop_spow = DDL('ALTER TABLE users SET secretpowers FALSE')
     |    connection.execute(drop_spow)
     |  
     |  When operating on Table events, the following ``statement``
     |  string substitions are available::
     |  
     |    %(table)s  - the Table name, with any required quoting applied
     |    %(schema)s - the schema name, with any required quoting applied
     |    %(fullname)s - the Table name including schema, quoted if needed
     |  
     |  The DDL's "context", if any, will be combined with the standard
     |  substutions noted above.  Keys present in the context will override
     |  the standard substitutions.
     |  
     |  Method resolution order:
     |      DDL
     |      DDLElement
     |      sqlalchemy.sql.expression.Executable
     |      sqlalchemy.sql.expression._Generative
     |      sqlalchemy.sql.expression.ClauseElement
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, statement, on=None, context=None, bind=None)
     |      Create a DDL statement.
     |      
     |      :param statement:
     |        A string or unicode string to be executed.  Statements will be
     |        processed with Python's string formatting operator.  See the
     |        ``context`` argument and the ``execute_at`` method.
     |      
     |        A literal '%' in a statement must be escaped as '%%'.
     |      
     |        SQL bind parameters are not available in DDL statements.
     |      
     |      :param on:
     |        Deprecated.  See :meth:`.DDLElement.execute_if`.
     |      
     |        Optional filtering criteria.  May be a string, tuple or a callable
     |        predicate.  If a string, it will be compared to the name of the
     |        executing database dialect::
     |      
     |          DDL('something', on='postgresql')
     |      
     |        If a tuple, specifies multiple dialect names::
     |      
     |          DDL('something', on=('postgresql', 'mysql'))
     |      
     |        If a callable, it will be invoked with four positional arguments
     |        as well as optional keyword arguments:
     |      
     |          :ddl:
     |            This DDL element.
     |      
     |          :event:
     |            The name of the event that has triggered this DDL, such as
     |            'after-create' Will be None if the DDL is executed explicitly.
     |      
     |          :target:
     |            The ``Table`` or ``MetaData`` object which is the target of 
     |            this event. May be None if the DDL is executed explicitly.
     |      
     |          :connection:
     |            The ``Connection`` being used for DDL execution
     |      
     |          :tables:
     |            Optional keyword argument - a list of Table objects which are to
     |            be created/ dropped within a MetaData.create_all() or drop_all()
     |            method call.
     |      
     |      
     |        If the callable returns a true value, the DDL statement will be
     |        executed.
     |      
     |      :param context:
     |        Optional dictionary, defaults to None.  These values will be
     |        available for use in string substitutions on the DDL statement.
     |      
     |      :param bind:
     |        Optional. A :class:`~sqlalchemy.engine.base.Connectable`, used by
     |        default when ``execute()`` is invoked without a bind argument.
     |      
     |      
     |      See also:
     |      
     |          :class:`.DDLEvents`
     |          :mod:`sqlalchemy.event`
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'ddl'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DDLElement:
     |  
     |  __call__(self, target, bind, **kw)
     |      Execute the DDL as a ddl_listener.
     |  
     |  against(self, target)
     |      Return a copy of this DDL against a specific schema item.
     |  
     |  execute(self, bind=None, target=None)
     |      Execute this DDL immediately.
     |      
     |      Executes the DDL statement in isolation using the supplied
     |      :class:`~sqlalchemy.engine.base.Connectable` or
     |      :class:`~sqlalchemy.engine.base.Connectable` assigned to the ``.bind``
     |      property, if not supplied. If the DDL has a conditional ``on``
     |      criteria, it will be invoked with None as the event.
     |      
     |      :param bind:
     |        Optional, an ``Engine`` or ``Connection``. If not supplied, a valid
     |        :class:`~sqlalchemy.engine.base.Connectable` must be present in the
     |        ``.bind`` property.
     |      
     |      :param target:
     |        Optional, defaults to None.  The target SchemaItem for the 
     |        execute call.  Will be passed to the ``on`` callable if any, 
     |        and may also provide string expansion data for the
     |        statement. See ``execute_at`` for more information.
     |  
     |  execute_at(self, event_name, target)
     |      Link execution of this DDL to the DDL lifecycle of a SchemaItem.
     |      
     |      .. deprecated:: 0.7 See :class:`.DDLEvents`, as well as :meth:`.DDLElement.execute_if`.
     |      
     |      Links this ``DDLElement`` to a ``Table`` or ``MetaData`` instance,
     |      executing it when that schema item is created or dropped. The DDL
     |      statement will be executed using the same Connection and transactional
     |      context as the Table create/drop itself. The ``.bind`` property of
     |      this statement is ignored.
     |      
     |      :param event:
     |        One of the events defined in the schema item's ``.ddl_events``;
     |        e.g. 'before-create', 'after-create', 'before-drop' or 'after-drop'
     |      
     |      :param target:
     |        The Table or MetaData instance for which this DDLElement will
     |        be associated with.
     |      
     |      A DDLElement instance can be linked to any number of schema items. 
     |      
     |      ``execute_at`` builds on the ``append_ddl_listener`` interface of
     |      :class:`.MetaData` and :class:`.Table` objects.
     |      
     |      Caveat: Creating or dropping a Table in isolation will also trigger
     |      any DDL set to ``execute_at`` that Table's MetaData.  This may change
     |      in a future release.
     |  
     |  execute_if(self, dialect=None, callable_=None, state=None)
     |      Return a callable that will execute this 
     |      DDLElement conditionally.
     |      
     |      Used to provide a wrapper for event listening::
     |      
     |          event.listen(
     |                      metadata,
     |                      'before_create', 
     |                      DDL("my_ddl").execute_if(dialect='postgresql')
     |                  )
     |      
     |      :param dialect: May be a string, tuple or a callable
     |        predicate.  If a string, it will be compared to the name of the
     |        executing database dialect::
     |      
     |          DDL('something').execute_if(dialect='postgresql')
     |      
     |        If a tuple, specifies multiple dialect names::
     |      
     |          DDL('something').execute_if(dialect=('postgresql', 'mysql'))
     |      
     |      :param callable_: A callable, which will be invoked with 
     |        four positional arguments as well as optional keyword 
     |        arguments:
     |      
     |          :ddl:
     |            This DDL element.
     |      
     |          :target:
     |            The :class:`.Table` or :class:`.MetaData` object which is the target of 
     |            this event. May be None if the DDL is executed explicitly.
     |      
     |          :bind:
     |            The :class:`.Connection` being used for DDL execution
     |      
     |          :tables:
     |            Optional keyword argument - a list of Table objects which are to
     |            be created/ dropped within a MetaData.create_all() or drop_all()
     |            method call.
     |      
     |          :state:
     |            Optional keyword argument - will be the ``state`` argument
     |            passed to this function.
     |      
     |          :checkfirst:
     |           Keyword argument, will be True if the 'checkfirst' flag was
     |           set during the call to ``create()``, ``create_all()``, 
     |           ``drop()``, ``drop_all()``.
     |      
     |        If the callable returns a true value, the DDL statement will be
     |        executed.
     |      
     |      :param state: any value which will be passed to the callable_ 
     |        as the ``state`` keyword argument.
     |      
     |      See also:
     |      
     |          :class:`.DDLEvents`
     |      
     |          :ref:`event_toplevel`
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DDLElement:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DDLElement:
     |  
     |  callable_ = None
     |  
     |  dialect = None
     |  
     |  on = None
     |  
     |  target = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.Executable:
     |  
     |  execution_options(self, **kw)
     |      Set non-SQL options for the statement which take effect during
     |      execution.
     |      
     |      Execution options can be set on a per-statement or 
     |      per :class:`.Connection` basis.   Additionally, the 
     |      :class:`.Engine` and ORM :class:`~.orm.query.Query` objects provide access
     |      to execution options which they in turn configure upon connections.
     |      
     |      The :meth:`execution_options` method is generative.  A new 
     |      instance of this statement is returned that contains the options::
     |      
     |          statement = select([table.c.x, table.c.y])
     |          statement = statement.execution_options(autocommit=True)
     |      
     |      Note that only a subset of possible execution options can be applied
     |      to a statement - these include "autocommit" and "stream_results",
     |      but not "isolation_level" or "compiled_cache".
     |      See :meth:`.Connection.execution_options` for a full list of 
     |      possible options.
     |      
     |      See also:
     |      
     |          :meth:`.Connection.execution_options()`
     |      
     |          :meth:`.Query.execution_options()`
     |  
     |  scalar(self, *multiparams, **params)
     |      Compile and execute this :class:`.Executable`, returning the
     |      result's scalar representation.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.Executable:
     |  
     |  supports_execution = True
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.expression._Generative:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.ClauseElement:
     |  
     |  __and__(self, other)
     |  
     |  __getstate__(self)
     |  
     |  __invert__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __or__(self, other)
     |  
     |  __str__(self)
     |  
     |  compare(self, other, **kw)
     |      Compare this ClauseElement to the given ClauseElement.
     |      
     |      Subclasses should override the default behavior, which is a
     |      straight identity comparison.
     |      
     |      \**kw are arguments consumed by subclass compare() methods and
     |      may be used to modify the criteria for comparison.
     |      (see :class:`.ColumnElement`)
     |  
     |  compile(self, bind=None, dialect=None, **kw)
     |      Compile this SQL expression.
     |      
     |      The return value is a :class:`~sqlalchemy.engine.Compiled` object.
     |      Calling ``str()`` or ``unicode()`` on the returned value will yield a
     |      string representation of the result. The
     |      :class:`~sqlalchemy.engine.Compiled` object also can return a
     |      dictionary of bind parameter names and values
     |      using the ``params`` accessor.
     |      
     |      :param bind: An ``Engine`` or ``Connection`` from which a
     |          ``Compiled`` will be acquired. This argument takes precedence over
     |          this :class:`.ClauseElement`'s bound engine, if any.
     |      
     |      :param column_keys: Used for INSERT and UPDATE statements, a list of
     |          column names which should be present in the VALUES clause of the
     |          compiled statement. If ``None``, all columns from the target table
     |          object are rendered.
     |      
     |      :param dialect: A ``Dialect`` instance from which a ``Compiled``
     |          will be acquired. This argument takes precedence over the `bind`
     |          argument as well as this :class:`.ClauseElement`'s bound engine, if
     |          any.
     |      
     |      :param inline: Used for INSERT statements, for a dialect which does
     |          not support inline retrieval of newly generated primary key
     |          columns, will force the expression used to create the new primary
     |          key value to be rendered inline within the INSERT statement's
     |          VALUES clause. This typically refers to Sequence execution but may
     |          also refer to any server-side default generation function
     |          associated with a primary key `Column`.
     |  
     |  get_children(self, **kwargs)
     |      Return immediate child elements of this :class:`.ClauseElement`.
     |      
     |      This is used for visit traversal.
     |      
     |      \**kwargs may contain flags that change the collection that is
     |      returned, for example to return a subset of items in order to
     |      cut down on larger traversals, or to return child items from a
     |      different context (such as schema-level collections instead of
     |      clause-level).
     |  
     |  params(self, *optionaldict, **kwargs)
     |      Return a copy with :func:`bindparam()` elements replaced.
     |      
     |      Returns a copy of this ClauseElement with :func:`bindparam()`
     |      elements replaced with values taken from the given dictionary::
     |      
     |        >>> clause = column('x') + bindparam('foo')
     |        >>> print clause.compile().params
     |        {'foo':None}
     |        >>> print clause.params({'foo':7}).compile().params
     |        {'foo':7}
     |  
     |  self_group(self, against=None)
     |      Apply a 'grouping' to this :class:`.ClauseElement`.
     |      
     |      This method is overridden by subclasses to return a 
     |      "grouping" construct, i.e. parenthesis.   In particular
     |      it's used by "binary" expressions to provide a grouping
     |      around themselves when placed into a larger expression, 
     |      as well as by :func:`.select` constructs when placed into
     |      the FROM clause of another :func:`.select`.  (Note that 
     |      subqueries should be normally created using the 
     |      :func:`.Select.alias` method, as many platforms require
     |      nested SELECT statements to be named).
     |      
     |      As expressions are composed together, the application of
     |      :meth:`self_group` is automatic - end-user code should never 
     |      need to use this method directly.  Note that SQLAlchemy's
     |      clause constructs take operator precedence into account - 
     |      so parenthesis might not be needed, for example, in 
     |      an expression like ``x OR (y AND z)`` - AND takes precedence
     |      over OR.
     |      
     |      The base :meth:`self_group` method of :class:`.ClauseElement`
     |      just returns self.
     |  
     |  unique_params(self, *optionaldict, **kwargs)
     |      Return a copy with :func:`bindparam()` elements replaced.
     |      
     |      Same functionality as ``params()``, except adds `unique=True`
     |      to affected bind parameters so that multiple statements can be
     |      used.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class DECIMAL(Numeric)
     |  The SQL DECIMAL type.
     |  
     |  Method resolution order:
     |      DECIMAL
     |      Numeric
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'DECIMAL'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  __init__(self, precision=None, scale=None, asdecimal=True)
     |      Construct a Numeric.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |        TABLE``.
     |      
     |      :param scale: the numeric scale for use in DDL ``CREATE TABLE``.
     |      
     |      :param asdecimal: default True.  Return whether or not
     |        values should be sent as Python Decimal objects, or
     |        as floats.   Different DBAPIs send one or the other based on
     |        datatypes - the Numeric type will ensure that return values
     |        are one or the other across DBAPIs consistently.
     |      
     |      When using the ``Numeric`` type, care should be taken to ensure
     |      that the asdecimal setting is apppropriate for the DBAPI in use -
     |      when Numeric applies a conversion from Decimal->float or float->
     |      Decimal, this conversion incurs an additional performance overhead
     |      for all result columns received. 
     |      
     |      DBAPIs that return Decimal natively (e.g. psycopg2) will have 
     |      better accuracy and higher performance with a setting of ``True``,
     |      as the native translation to Decimal reduces the amount of floating-
     |      point issues at play, and the Numeric type itself doesn't need
     |      to apply any further conversions.  However, another DBAPI which 
     |      returns floats natively *will* incur an additional conversion 
     |      overhead, and is still subject to floating point data loss - in 
     |      which case ``asdecimal=False`` will at least remove the extra
     |      conversion overhead.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Date(_DateAffinity, TypeEngine)
     |  A type for ``datetime.date()`` objects.
     |  
     |  Method resolution order:
     |      Date
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'date'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class DateTime(_DateAffinity, TypeEngine)
     |  A type for ``datetime.datetime()`` objects.
     |  
     |  Date and time types return objects from the Python ``datetime``
     |  module.  Most DBAPIs have built in support for the datetime
     |  module, with the noted exception of SQLite.  In the case of
     |  SQLite, date and time types are stored as strings which are then
     |  converted back to datetime objects when rows are returned.
     |  
     |  Method resolution order:
     |      DateTime
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, timezone=False)
     |      Construct a new :class:`.DateTime`.
     |      
     |      :param timezone: boolean.  If True, and supported by the
     |      backend, will produce 'TIMESTAMP WITH TIMEZONE'. For backends
     |      that don't support timezone aware timestamps, has no
     |      effect.
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'datetime'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class DefaultClause(FetchedValue)
     |  A DDL-specified DEFAULT column value.
     |  
     |  :class:`.DefaultClause` is a :class:`.FetchedValue`
     |  that also generates a "DEFAULT" clause when
     |  "CREATE TABLE" is emitted.
     |  
     |  :class:`.DefaultClause` is generated automatically
     |  whenever the ``server_default``, ``server_onupdate`` arguments of
     |  :class:`.Column` are used.  A :class:`.DefaultClause`
     |  can be passed positionally as well.
     |  
     |  For example, the following::
     |  
     |      Column('foo', Integer, server_default="50")
     |  
     |  Is equivalent to::
     |  
     |      Column('foo', Integer, DefaultClause("50"))
     |  
     |  Method resolution order:
     |      DefaultClause
     |      FetchedValue
     |      _NotAColumnExpr
     |      sqlalchemy.events.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, arg, for_update=False, _reflected=False)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  has_argument = True
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from FetchedValue:
     |  
     |  is_server_default = True
     |  
     |  reflected = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
    
    class Enum(String, SchemaType)
     |  Generic Enum Type.
     |  
     |  The Enum type provides a set of possible string values which the 
     |  column is constrained towards.
     |  
     |  By default, uses the backend's native ENUM type if available, 
     |  else uses VARCHAR + a CHECK constraint.
     |  
     |  See also:
     |  
     |      :class:`~.postgresql.ENUM` - PostgreSQL-specific type,
     |      which has additional functionality.
     |  
     |  Method resolution order:
     |      Enum
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      SchemaType
     |      sqlalchemy.events.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *enums, **kw)
     |      Construct an enum.
     |      
     |      Keyword arguments which don't apply to a specific backend are ignored
     |      by that backend.
     |      
     |      :param \*enums: string or unicode enumeration labels. If unicode
     |         labels are present, the `convert_unicode` flag is auto-enabled.
     |      
     |      :param convert_unicode: Enable unicode-aware bind parameter and
     |         result-set processing for this Enum's data. This is set
     |         automatically based on the presence of unicode label strings.
     |      
     |      :param metadata: Associate this type directly with a ``MetaData``
     |         object. For types that exist on the target database as an
     |         independent schema construct (Postgresql), this type will be
     |         created and dropped within ``create_all()`` and ``drop_all()``
     |         operations. If the type is not associated with any ``MetaData``
     |         object, it will associate itself with each ``Table`` in which it is
     |         used, and will be created when any of those individual tables are
     |         created, after a check is performed for it's existence. The type is
     |         only dropped when ``drop_all()`` is called for that ``Table``
     |         object's metadata, however.
     |      
     |      :param name: The name of this type. This is required for Postgresql
     |         and any future supported database which requires an explicitly
     |         named type, or an explicitly named constraint in order to generate
     |         the type and/or a table that uses it.
     |      
     |      :param native_enum: Use the database's native ENUM type when
     |         available. Defaults to True. When False, uses VARCHAR + check
     |         constraint for all backends.
     |      
     |      :param schema: Schemaname of this type. For types that exist on the
     |         target database as an independent schema construct (Postgresql),
     |         this parameter specifies the named schema in which the type is
     |         present.
     |      
     |      :param quote: Force quoting to be on or off on the type's name. If
     |         left as the default of `None`, the usual schema-level "case
     |         sensitive"/"reserved name" rules are used to determine if this
     |         type's name should be quoted.
     |  
     |  adapt(self, impltype, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'enum'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaType:
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue CREATE ddl for this type, if applicable.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue DROP ddl for this type, if applicable.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from SchemaType:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
    
    class FLOAT(Float)
     |  The SQL FLOAT type.
     |  
     |  Method resolution order:
     |      FLOAT
     |      Float
     |      Numeric
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'FLOAT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Float:
     |  
     |  __init__(self, precision=None, asdecimal=False, **kwargs)
     |      Construct a Float.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |         TABLE``.
     |      
     |      :param asdecimal: the same flag as that of :class:`.Numeric`, but
     |        defaults to ``False``.   Note that setting this flag to ``True``
     |        results in floating point conversion.
     |      
     |      :param \**kwargs: deprecated.  Additional arguments here are ignored
     |       by the default :class:`.Float` type.  For database specific 
     |       floats that support additional arguments, see that dialect's 
     |       documentation for details, such as :class:`sqlalchemy.dialects.mysql.FLOAT`.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Float:
     |  
     |  scale = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class FetchedValue(_NotAColumnExpr, sqlalchemy.events.SchemaEventTarget)
     |  A marker for a transparent database-side default.
     |  
     |  Use :class:`.FetchedValue` when the database is configured
     |  to provide some automatic default for a column.
     |  
     |  E.g.::
     |  
     |      Column('foo', Integer, FetchedValue())
     |  
     |  Would indicate that some trigger or default generator
     |  will create a new value for the ``foo`` column during an
     |  INSERT.
     |  
     |  Method resolution order:
     |      FetchedValue
     |      _NotAColumnExpr
     |      sqlalchemy.events.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, for_update=False)
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  has_argument = False
     |  
     |  is_server_default = True
     |  
     |  reflected = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
    
    class Float(Numeric)
     |  A type for ``float`` numbers.
     |  
     |  Returns Python ``float`` objects by default, applying
     |  conversion as needed.
     |  
     |  Method resolution order:
     |      Float
     |      Numeric
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, precision=None, asdecimal=False, **kwargs)
     |      Construct a Float.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |         TABLE``.
     |      
     |      :param asdecimal: the same flag as that of :class:`.Numeric`, but
     |        defaults to ``False``.   Note that setting this flag to ``True``
     |        results in floating point conversion.
     |      
     |      :param \**kwargs: deprecated.  Additional arguments here are ignored
     |       by the default :class:`.Float` type.  For database specific 
     |       floats that support additional arguments, see that dialect's 
     |       documentation for details, such as :class:`sqlalchemy.dialects.mysql.FLOAT`.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'float'
     |  
     |  scale = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class ForeignKey(SchemaItem)
     |  Defines a dependency between two columns.
     |  
     |  ``ForeignKey`` is specified as an argument to a :class:`.Column` object,
     |  e.g.::
     |  
     |      t = Table("remote_table", metadata, 
     |          Column("remote_id", ForeignKey("main_table.id"))
     |      )
     |  
     |  Note that ``ForeignKey`` is only a marker object that defines
     |  a dependency between two columns.   The actual constraint
     |  is in all cases represented by the :class:`.ForeignKeyConstraint`
     |  object.   This object will be generated automatically when
     |  a ``ForeignKey`` is associated with a :class:`.Column` which 
     |  in turn is associated with a :class:`.Table`.   Conversely,
     |  when :class:`.ForeignKeyConstraint` is applied to a :class:`.Table`,
     |  ``ForeignKey`` markers are automatically generated to be
     |  present on each associated :class:`.Column`, which are also
     |  associated with the constraint object.
     |  
     |  Note that you cannot define a "composite" foreign key constraint,
     |  that is a constraint between a grouping of multiple parent/child
     |  columns, using ``ForeignKey`` objects.   To define this grouping,
     |  the :class:`.ForeignKeyConstraint` object must be used, and applied
     |  to the :class:`.Table`.   The associated ``ForeignKey`` objects
     |  are created automatically.
     |  
     |  The ``ForeignKey`` objects associated with an individual 
     |  :class:`.Column` object are available in the `foreign_keys` collection
     |  of that column.
     |  
     |  Further examples of foreign key configuration are in
     |  :ref:`metadata_foreignkeys`.
     |  
     |  Method resolution order:
     |      ForeignKey
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, column, _constraint=None, use_alter=False, name=None, onupdate=None, ondelete=None, deferrable=None, schema=None, initially=None, link_to_name=False)
     |      Construct a column-level FOREIGN KEY.
     |      
     |      The :class:`.ForeignKey` object when constructed generates a
     |      :class:`.ForeignKeyConstraint` which is associated with the parent
     |      :class:`.Table` object's collection of constraints.
     |      
     |      :param column: A single target column for the key relationship. A
     |          :class:`.Column` object or a column name as a string:
     |          ``tablename.columnkey`` or ``schema.tablename.columnkey``.
     |          ``columnkey`` is the ``key`` which has been assigned to the column
     |          (defaults to the column name itself), unless ``link_to_name`` is
     |          ``True`` in which case the rendered name of the column is used.
     |      
     |          .. versionadded:: 0.7.4
     |              Note that if the schema name is not included, and the underlying
     |              :class:`.MetaData` has a "schema", that value will be used.
     |      
     |      :param name: Optional string. An in-database name for the key if
     |          `constraint` is not provided.
     |      
     |      :param onupdate: Optional string. If set, emit ON UPDATE <value> when
     |          issuing DDL for this constraint. Typical values include CASCADE,
     |          DELETE and RESTRICT.
     |      
     |      :param ondelete: Optional string. If set, emit ON DELETE <value> when
     |          issuing DDL for this constraint. Typical values include CASCADE,
     |          DELETE and RESTRICT.
     |      
     |      :param deferrable: Optional bool. If set, emit DEFERRABLE or NOT
     |          DEFERRABLE when issuing DDL for this constraint.
     |      
     |      :param initially: Optional string. If set, emit INITIALLY <value> when
     |          issuing DDL for this constraint.
     |      
     |      :param link_to_name: if True, the string name given in ``column`` is
     |          the rendered name of the referenced column, not its locally
     |          assigned ``key``.
     |      
     |      :param use_alter: passed to the underlying
     |          :class:`.ForeignKeyConstraint` to indicate the constraint should be
     |          generated/dropped externally from the CREATE TABLE/ DROP TABLE
     |          statement. See that classes' constructor for details.
     |  
     |  __repr__(self)
     |  
     |  column(...)
     |      Return the target :class:`.Column` referenced by this :class:`.ForeignKey`.
     |      
     |      If this :class:`.ForeignKey` was created using a
     |      string-based target column specification, this
     |      attribute will on first access initiate a resolution
     |      process to locate the referenced remote
     |      :class:`.Column`.  The resolution process traverses
     |      to the parent :class:`.Column`, :class:`.Table`, and
     |      :class:`.MetaData` to proceed - if any of these aren't 
     |      yet present, an error is raised.
     |  
     |  copy(self, schema=None)
     |      Produce a copy of this :class:`.ForeignKey` object.
     |      
     |      The new :class:`.ForeignKey` will not be bound
     |      to any :class:`.Column`.
     |      
     |      This method is usually used by the internal
     |      copy procedures of :class:`.Column`, :class:`.Table`,
     |      and :class:`.MetaData`.
     |      
     |      :param schema: The returned :class:`.ForeignKey` will
     |        reference the original table and column name, qualified
     |        by the given string schema name.
     |  
     |  get_referent(self, table)
     |      Return the :class:`.Column` in the given :class:`.Table` 
     |      referenced by this :class:`.ForeignKey`.
     |      
     |      Returns None if this :class:`.ForeignKey` does not reference the given
     |      :class:`.Table`.
     |  
     |  references(self, table)
     |      Return True if the given :class:`.Table` is referenced by this :class:`.ForeignKey`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  target_fullname
     |      Return a string based 'column specification' for this :class:`.ForeignKey`.
     |      
     |      This is usually the equivalent of the string-based "tablename.colname"
     |      argument first passed to the object's constructor.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'foreign_key'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class ForeignKeyConstraint(Constraint)
     |  A table-level FOREIGN KEY constraint.
     |  
     |  Defines a single column or composite FOREIGN KEY ... REFERENCES
     |  constraint. For a no-frills, single column foreign key, adding a
     |  :class:`.ForeignKey` to the definition of a :class:`.Column` is a shorthand
     |  equivalent for an unnamed, single column :class:`.ForeignKeyConstraint`.
     |  
     |  Examples of foreign key configuration are in :ref:`metadata_foreignkeys`.
     |  
     |  Method resolution order:
     |      ForeignKeyConstraint
     |      Constraint
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, columns, refcolumns, name=None, onupdate=None, ondelete=None, deferrable=None, initially=None, use_alter=False, link_to_name=False, table=None)
     |      Construct a composite-capable FOREIGN KEY.
     |      
     |      :param columns: A sequence of local column names. The named columns
     |        must be defined and present in the parent Table. The names should
     |        match the ``key`` given to each column (defaults to the name) unless
     |        ``link_to_name`` is True.
     |      
     |      :param refcolumns: A sequence of foreign column names or Column
     |        objects. The columns must all be located within the same Table.
     |      
     |      :param name: Optional, the in-database name of the key.
     |      
     |      :param onupdate: Optional string. If set, emit ON UPDATE <value> when
     |        issuing DDL for this constraint. Typical values include CASCADE,
     |        DELETE and RESTRICT.
     |      
     |      :param ondelete: Optional string. If set, emit ON DELETE <value> when
     |        issuing DDL for this constraint. Typical values include CASCADE,
     |        DELETE and RESTRICT.
     |      
     |      :param deferrable: Optional bool. If set, emit DEFERRABLE or NOT
     |        DEFERRABLE when issuing DDL for this constraint.
     |      
     |      :param initially: Optional string. If set, emit INITIALLY <value> when
     |        issuing DDL for this constraint.
     |      
     |      :param link_to_name: if True, the string name given in ``column`` is
     |        the rendered name of the referenced column, not its locally assigned
     |        ``key``.
     |      
     |      :param use_alter: If True, do not emit the DDL for this constraint as
     |        part of the CREATE TABLE definition. Instead, generate it via an
     |        ALTER TABLE statement issued after the full collection of tables
     |        have been created, and drop it via an ALTER TABLE statement before
     |        the full collection of tables are dropped. This is shorthand for the
     |        usage of :class:`.AddConstraint` and :class:`.DropConstraint` applied
     |        as "after-create" and "before-drop" events on the MetaData object.
     |        This is normally used to generate/drop constraints on objects that
     |        are mutually dependent on each other.
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  columns
     |  
     |  elements
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'foreign_key_constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    INT = class INTEGER(Integer)
     |  The SQL INT or INTEGER type.
     |  
     |  Method resolution order:
     |      INTEGER
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'INTEGER'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class INTEGER(Integer)
     |  The SQL INT or INTEGER type.
     |  
     |  Method resolution order:
     |      INTEGER
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'INTEGER'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Index(ColumnCollectionMixin, SchemaItem)
     |  A table-level INDEX.
     |  
     |  Defines a composite (one or more column) INDEX. For a no-frills, single
     |  column index, adding ``index=True`` to the ``Column`` definition is
     |  a shorthand equivalent for an unnamed, single column :class:`.Index`.
     |  
     |  See also:
     |  
     |  :ref:`schema_indexes` - General information on :class:`.Index`.
     |  
     |  :ref:`postgresql_indexes` - PostgreSQL-specific options available for the :class:`.Index` construct.
     |  
     |  :ref:`mysql_indexes` - MySQL-specific options available for the :class:`.Index` construct.
     |  
     |  Method resolution order:
     |      Index
     |      ColumnCollectionMixin
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, *columns, **kw)
     |      Construct an index object.
     |      
     |      :param name:
     |        The name of the index
     |      
     |      :param \*columns:
     |        Columns to include in the index. All columns must belong to the same
     |        table.
     |      
     |      :param unique:
     |          Defaults to False: create a unique index.
     |      
     |      :param \**kw:
     |          Other keyword arguments may be interpreted by specific dialects.
     |  
     |  __repr__(self)
     |  
     |  create(self, bind=None)
     |      Issue a ``CREATE`` statement for this 
     |      :class:`.Index`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      See also :meth:`.MetaData.create_all`.
     |  
     |  drop(self, bind=None)
     |      Issue a ``DROP`` statement for this 
     |      :class:`.Index`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      See also :meth:`.MetaData.drop_all`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      Return the connectable associated with this Index.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'index'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Integer(_DateAffinity, TypeEngine)
     |  A type for ``int`` integers.
     |  
     |  Method resolution order:
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'integer'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Interval(_DateAffinity, TypeDecorator)
     |  A type for ``datetime.timedelta()`` objects.
     |  
     |  The Interval type deals with ``datetime.timedelta`` objects.  In
     |  PostgreSQL, the native ``INTERVAL`` type is used; for others, the
     |  value is stored as a date which is relative to the "epoch"
     |  (Jan. 1, 1970).
     |  
     |  Note that the ``Interval`` type does not currently provide date arithmetic
     |  operations on platforms which do not support interval types natively. Such
     |  operations usually require transformation of both sides of the expression
     |  (such as, conversion of both sides into integer epoch values first) which
     |  currently is a manual procedure (such as via
     |  :attr:`~sqlalchemy.sql.expression.func`).
     |  
     |  Method resolution order:
     |      Interval
     |      _DateAffinity
     |      TypeDecorator
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, native=True, second_precision=None, day_precision=None)
     |      Construct an Interval object.
     |      
     |      :param native: when True, use the actual
     |        INTERVAL type provided by the database, if
     |        supported (currently Postgresql, Oracle).
     |        Otherwise, represent the interval data as 
     |        an epoch value regardless.
     |      
     |      :param second_precision: For native interval types
     |        which support a "fractional seconds precision" parameter,
     |        i.e. Oracle and Postgresql
     |      
     |      :param day_precision: for native interval types which 
     |        support a "day precision" parameter, i.e. Oracle.
     |  
     |  adapt(self, cls, **kw)
     |  
     |  bind_processor(self, dialect)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  epoch = datetime.datetime(1970, 1, 1, 0, 0)
     |  
     |  impl = <class 'sqlalchemy.types.DateTime'>
     |      A type for ``datetime.datetime()`` objects.
     |      
     |      Date and time types return objects from the Python ``datetime``
     |      module.  Most DBAPIs have built in support for the datetime
     |      module, with the noted exception of SQLite.  In the case of
     |      SQLite, date and time types are stored as strings which are then
     |      converted back to datetime objects when rows are returned.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeDecorator:
     |  
     |  __getattr__(self, key)
     |      Proxy all other undefined accessors to the underlying
     |      implementation.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      By default, returns self.   This method is called by
     |      the expression system when an object using this type is 
     |      on the left or right side of an expression against a plain Python
     |      object which does not yet have a SQLAlchemy type assigned::
     |      
     |          expr = table.c.somecolumn + 35
     |      
     |      Where above, if ``somecolumn`` uses this type, this method will
     |      be called with the value ``operator.add``
     |      and ``35``.  The return value is whatever SQLAlchemy type should
     |      be used for ``35`` for this particular operation.
     |  
     |  compare_values(self, x, y)
     |      Given two values, compare them for equality.
     |      
     |      By default this calls upon :meth:`.TypeEngine.compare_values` 
     |      of the underlying "impl", which in turn usually
     |      uses the Python equals operator ``==``.
     |      
     |      This function is used by the ORM to compare
     |      an original-loaded value with an intercepted
     |      "changed" value, to determine if a net change
     |      has occurred.
     |  
     |  copy(self)
     |      Produce a copy of this :class:`.TypeDecorator` instance.
     |      
     |      This is a shallow copy and is provided to fulfill part of 
     |      the :class:`.TypeEngine` contract.  It usually does not
     |      need to be overridden unless the user-defined :class:`.TypeDecorator`
     |      has local state that should be deep-copied.
     |  
     |  copy_value(self, value)
     |      Given a value, produce a copy of it.
     |      
     |      By default this calls upon :meth:`.TypeEngine.copy_value` 
     |      of the underlying "impl".
     |      
     |      :meth:`.copy_value` will return the object
     |      itself, assuming "mutability" is not enabled.
     |      Only the :class:`.MutableType` mixin provides a copy 
     |      function that actually produces a new object.
     |      The copying function is used by the ORM when
     |      "mutable" types are used, to memoize the original
     |      version of an object as loaded from the database,
     |      which is then compared to the possibly mutated
     |      version to check for changes.
     |      
     |      Modern implementations should use the 
     |      ``sqlalchemy.ext.mutable`` extension described in
     |      :ref:`mutable_toplevel` for intercepting in-place
     |      changes to values.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the DBAPI type object represented by this :class:`.TypeDecorator`.
     |      
     |      By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the 
     |      underlying "impl".
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |  
     |  load_dialect_impl(self, dialect)
     |      Return a :class:`.TypeEngine` object corresponding to a dialect.
     |      
     |      This is an end-user override hook that can be used to provide
     |      differing types depending on the given dialect.  It is used
     |      by the :class:`.TypeDecorator` implementation of :meth:`type_engine` 
     |      to help determine what type should ultimately be returned
     |      for a given :class:`.TypeDecorator`.
     |      
     |      By default returns ``self.impl``.
     |  
     |  process_bind_param(self, value, dialect)
     |      Receive a bound parameter value to be converted.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed along to the underlying
     |      :class:`.TypeEngine` object, and from there to the 
     |      DBAPI ``execute()`` method.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data. 
     |      This could also be used as a hook for validating logic.
     |      
     |      This operation should be designed with the reverse operation
     |      in mind, which would be the process_result_value method of
     |      this class.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |  
     |  process_result_value(self, value, dialect)
     |      Receive a result-row column value to be converted.
     |      
     |      Subclasses should implement this method to operate on data
     |      fetched from the database.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed back to the application,
     |      given a value that is already processed by
     |      the underlying :class:`.TypeEngine` object, originally
     |      from the DBAPI cursor method ``fetchone()`` or similar.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data. 
     |      This could also be used as a hook for validating logic.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |      
     |      This operation should be designed to be reversible by
     |      the "process_bind_param" method of this class.
     |  
     |  type_engine(self, dialect)
     |      Return a dialect-specific :class:`.TypeEngine` instance for this :class:`.TypeDecorator`.
     |      
     |      In most cases this returns a dialect-adapted form of
     |      the :class:`.TypeEngine` type represented by ``self.impl``.
     |      Makes usage of :meth:`dialect_impl` but also traverses
     |      into wrapped :class:`.TypeDecorator` instances.
     |      Behavior can be customized here by overriding :meth:`load_dialect_impl`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TypeDecorator:
     |  
     |  __visit_name__ = 'type_decorator'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class LargeBinary(_Binary)
     |  A type for large binary byte data.
     |  
     |  The Binary type generates BLOB or BYTEA when tables are created,
     |  and also converts incoming values using the ``Binary`` callable
     |  provided by each DB-API.
     |  
     |  Method resolution order:
     |      LargeBinary
     |      _Binary
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None)
     |      Construct a LargeBinary type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements, for those BLOB types that accept a length
     |        (i.e. MySQL).  It does *not* produce a small BINARY/VARBINARY
     |        type - use the BINARY/VARBINARY types specifically for those.
     |        May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        *length* for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'large_binary'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |      # Python 3 has native bytes() type 
     |      # both sqlite3 and pg8000 seem to return it
     |      # (i.e. and not 'memoryview')
     |      # Py2K
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class MetaData(SchemaItem)
     |  A collection of :class:`.Table` objects and their associated schema constructs.
     |  
     |  Holds a collection of :class:`.Table` objects as well as 
     |  an optional binding to an :class:`.Engine` or
     |  :class:`.Connection`.  If bound, the :class:`.Table` objects
     |  in the collection and their columns may participate in implicit SQL
     |  execution.
     |  
     |  The :class:`.Table` objects themselves are stored in the ``metadata.tables``
     |  dictionary.
     |  
     |  The ``bind`` property may be assigned to dynamically.  A common pattern is
     |  to start unbound and then bind later when an engine is available::
     |  
     |    metadata = MetaData()
     |    # define tables
     |    Table('mytable', metadata, ...)
     |    # connect to an engine later, perhaps after loading a URL from a
     |    # configuration file
     |    metadata.bind = an_engine
     |  
     |  MetaData is a thread-safe object after tables have been explicitly defined
     |  or loaded via reflection.
     |  
     |  See also:
     |  
     |  :ref:`metadata_describing` - Introduction to database metadata
     |  
     |  :ref:`metadata_binding` - Information on binding connectables to :class:`.MetaData`
     |  
     |  .. index::
     |    single: thread safety; MetaData
     |  
     |  Method resolution order:
     |      MetaData
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __contains__(self, table_or_key)
     |  
     |  __getstate__(self)
     |  
     |  __init__(self, bind=None, reflect=False, schema=None, quote_schema=None)
     |      Create a new MetaData object.
     |      
     |      :param bind:
     |        An Engine or Connection to bind to.  May also be a string or URL
     |        instance, these are passed to create_engine() and this MetaData will
     |        be bound to the resulting engine.
     |      
     |      :param reflect:
     |        Optional, automatically load all tables from the bound database.
     |        Defaults to False. ``bind`` is required when this option is set.
     |        For finer control over loaded tables, use the ``reflect`` method of
     |        ``MetaData``.
     |      
     |      :param schema:
     |         The default schema to use for the :class:`.Table`, :class:`.Sequence`, and other
     |         objects associated with this :class:`.MetaData`.
     |         Defaults to ``None``.
     |      
     |      :param quote_schema:
     |          Sets the ``quote_schema`` flag for those :class:`.Table`, :class:`.Sequence`,
     |          and other objects which make usage of the local ``schema`` name.
     |      
     |      .. versionadded:: 0.7.4
     |          ``schema`` and ``quote_schema`` parameters.
     |  
     |  __repr__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  append_ddl_listener(self, event_name, listener)
     |      Append a DDL event listener to this ``MetaData``.
     |      
     |      Deprecated.  See :class:`.DDLEvents`.
     |  
     |  clear(self)
     |      Clear all Table objects from this MetaData.
     |  
     |  create_all(self, bind=None, tables=None, checkfirst=True)
     |      Create all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to recreate tables already
     |      present in the target database.
     |      
     |      :param bind:
     |        A :class:`~sqlalchemy.engine.base.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the total
     |        tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, don't issue CREATEs for tables already present
     |        in the target database.
     |  
     |  drop_all(self, bind=None, tables=None, checkfirst=True)
     |      Drop all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to drop tables not present in
     |      the target database.
     |      
     |      :param bind:
     |        A :class:`~sqlalchemy.engine.base.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the
     |        total tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, only issue DROPs for tables confirmed to be
     |        present in the target database.
     |  
     |  is_bound(self)
     |      True if this MetaData is bound to an Engine or Connection.
     |  
     |  reflect(self, bind=None, schema=None, views=False, only=None)
     |      Load all available table definitions from the database.
     |      
     |      Automatically creates ``Table`` entries in this ``MetaData`` for any
     |      table available in the database but not yet present in the
     |      ``MetaData``.  May be called multiple times to pick up tables recently
     |      added to the database, however no special action is taken if a table
     |      in this ``MetaData`` no longer exists in the database.
     |      
     |      :param bind:
     |        A :class:`~sqlalchemy.engine.base.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param schema:
     |        Optional, query and reflect tables from an alterate schema.
     |        If None, the schema associated with this :class:`.MetaData`
     |        is used, if any.
     |      
     |      :param views:
     |        If True, also reflect views.
     |      
     |      :param only:
     |        Optional.  Load only a sub-set of available named tables.  May be
     |        specified as a sequence of names or a callable.
     |      
     |        If a sequence of names is provided, only those tables will be
     |        reflected.  An error is raised if a table is requested but not
     |        available.  Named tables already present in this ``MetaData`` are
     |        ignored.
     |      
     |        If a callable is provided, it will be used as a boolean predicate to
     |        filter the list of potential table names.  The callable is called
     |        with a table name and this ``MetaData`` instance as positional
     |        arguments and should return a true value for any table to reflect.
     |  
     |  remove(self, table)
     |      Remove the given Table object from this MetaData.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      An Engine or Connection to which this MetaData is bound.
     |      
     |      This property may be assigned an ``Engine`` or ``Connection``, or
     |      assigned a string or URL to automatically create a basic ``Engine``
     |      for this bind with ``create_engine()``.
     |  
     |  sorted_tables
     |      Returns a list of ``Table`` objects sorted in order of
     |      dependency.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'metadata'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class NCHAR(Unicode)
     |  The SQL NCHAR type.
     |  
     |  Method resolution order:
     |      NCHAR
     |      Unicode
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'NCHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unicode:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a :class:`.Unicode` object.
     |      
     |      Parameters are the same as that of :class:`.String`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class NUMERIC(Numeric)
     |  The SQL NUMERIC type.
     |  
     |  Method resolution order:
     |      NUMERIC
     |      Numeric
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'NUMERIC'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  __init__(self, precision=None, scale=None, asdecimal=True)
     |      Construct a Numeric.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |        TABLE``.
     |      
     |      :param scale: the numeric scale for use in DDL ``CREATE TABLE``.
     |      
     |      :param asdecimal: default True.  Return whether or not
     |        values should be sent as Python Decimal objects, or
     |        as floats.   Different DBAPIs send one or the other based on
     |        datatypes - the Numeric type will ensure that return values
     |        are one or the other across DBAPIs consistently.
     |      
     |      When using the ``Numeric`` type, care should be taken to ensure
     |      that the asdecimal setting is apppropriate for the DBAPI in use -
     |      when Numeric applies a conversion from Decimal->float or float->
     |      Decimal, this conversion incurs an additional performance overhead
     |      for all result columns received. 
     |      
     |      DBAPIs that return Decimal natively (e.g. psycopg2) will have 
     |      better accuracy and higher performance with a setting of ``True``,
     |      as the native translation to Decimal reduces the amount of floating-
     |      point issues at play, and the Numeric type itself doesn't need
     |      to apply any further conversions.  However, another DBAPI which 
     |      returns floats natively *will* incur an additional conversion 
     |      overhead, and is still subject to floating point data loss - in 
     |      which case ``asdecimal=False`` will at least remove the extra
     |      conversion overhead.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class NVARCHAR(Unicode)
     |  The SQL NVARCHAR type.
     |  
     |  Method resolution order:
     |      NVARCHAR
     |      Unicode
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'NVARCHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Unicode:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a :class:`.Unicode` object.
     |      
     |      Parameters are the same as that of :class:`.String`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Numeric(_DateAffinity, TypeEngine)
     |  A type for fixed precision numbers.
     |  
     |  Typically generates DECIMAL or NUMERIC.  Returns
     |  ``decimal.Decimal`` objects by default, applying
     |  conversion as needed.
     |  
     |  .. note:: 
     |  
     |     The `cdecimal <http://pypi.python.org/pypi/cdecimal/>`_ library
     |     is a high performing alternative to Python's built-in
     |     ``decimal.Decimal`` type, which performs very poorly in high volume
     |     situations. SQLAlchemy 0.7 is tested against ``cdecimal`` and supports
     |     it fully. The type is not necessarily supported by DBAPI
     |     implementations however, most of which contain an import for plain
     |     ``decimal`` in their source code, even though some such as psycopg2
     |     provide hooks for alternate adapters. SQLAlchemy imports ``decimal``
     |     globally as well. While the alternate ``Decimal`` class can be patched
     |     into SQLA's ``decimal`` module, overall the most straightforward and
     |     foolproof way to use "cdecimal" given current DBAPI and Python support
     |     is to patch it directly into sys.modules before anything else is
     |     imported::
     |  
     |         import sys
     |         import cdecimal
     |         sys.modules["decimal"] = cdecimal
     |  
     |     While the global patch is a little ugly, it's particularly 
     |     important to use just one decimal library at a time since 
     |     Python Decimal and cdecimal Decimal objects 
     |     are not currently compatible *with each other*::
     |  
     |         >>> import cdecimal
     |         >>> import decimal
     |         >>> decimal.Decimal("10") == cdecimal.Decimal("10")
     |         False
     |  
     |     SQLAlchemy will provide more natural support of 
     |     cdecimal if and when it becomes a standard part of Python
     |     installations and is supported by all DBAPIs.
     |  
     |  Method resolution order:
     |      Numeric
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, precision=None, scale=None, asdecimal=True)
     |      Construct a Numeric.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |        TABLE``.
     |      
     |      :param scale: the numeric scale for use in DDL ``CREATE TABLE``.
     |      
     |      :param asdecimal: default True.  Return whether or not
     |        values should be sent as Python Decimal objects, or
     |        as floats.   Different DBAPIs send one or the other based on
     |        datatypes - the Numeric type will ensure that return values
     |        are one or the other across DBAPIs consistently.
     |      
     |      When using the ``Numeric`` type, care should be taken to ensure
     |      that the asdecimal setting is apppropriate for the DBAPI in use -
     |      when Numeric applies a conversion from Decimal->float or float->
     |      Decimal, this conversion incurs an additional performance overhead
     |      for all result columns received. 
     |      
     |      DBAPIs that return Decimal natively (e.g. psycopg2) will have 
     |      better accuracy and higher performance with a setting of ``True``,
     |      as the native translation to Decimal reduces the amount of floating-
     |      point issues at play, and the Numeric type itself doesn't need
     |      to apply any further conversions.  However, another DBAPI which 
     |      returns floats natively *will* incur an additional conversion 
     |      overhead, and is still subject to floating point data loss - in 
     |      which case ``asdecimal=False`` will at least remove the extra
     |      conversion overhead.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'numeric'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class PassiveDefault(DefaultClause)
     |  A DDL-specified DEFAULT column value.
     |  
     |  .. deprecated:: 0.6
     |      :class:`.PassiveDefault` is deprecated. 
     |      Use :class:`.DefaultClause`.
     |  
     |  Method resolution order:
     |      PassiveDefault
     |      DefaultClause
     |      FetchedValue
     |      _NotAColumnExpr
     |      sqlalchemy.events.SchemaEventTarget
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *arg, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultClause:
     |  
     |  __repr__(self)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DefaultClause:
     |  
     |  has_argument = True
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from FetchedValue:
     |  
     |  is_server_default = True
     |  
     |  reflected = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
    
    class PickleType(MutableType, TypeDecorator)
     |  Holds Python objects, which are serialized using pickle.
     |  
     |  PickleType builds upon the Binary type to apply Python's
     |  ``pickle.dumps()`` to incoming objects, and ``pickle.loads()`` on
     |  the way out, allowing any pickleable Python object to be stored as
     |  a serialized binary field.
     |  
     |  Method resolution order:
     |      PickleType
     |      MutableType
     |      TypeDecorator
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, protocol=2, pickler=None, mutable=False, comparator=None)
     |      Construct a PickleType.
     |      
     |      :param protocol: defaults to ``pickle.HIGHEST_PROTOCOL``.
     |      
     |      :param pickler: defaults to cPickle.pickle or pickle.pickle if
     |        cPickle is not available.  May be any object with
     |        pickle-compatible ``dumps` and ``loads`` methods.
     |      
     |      :param mutable: defaults to False; implements
     |        :meth:`AbstractType.is_mutable`.   When ``True``, incoming
     |        objects will be compared against copies of themselves 
     |        using the Python "equals" operator, unless the 
     |        ``comparator`` argument is present.   See
     |        :class:`.MutableType` for details on "mutable" type
     |        behavior.
     |      
     |        .. versionchanged:: 0.7.0
     |            Default changed from ``True``.
     |      
     |        .. note:: 
     |        
     |           This functionality is now superseded by the
     |           ``sqlalchemy.ext.mutable`` extension described in 
     |           :ref:`mutable_toplevel`.
     |      
     |      :param comparator: a 2-arg callable predicate used
     |        to compare values of this type.  If left as ``None``, 
     |        the Python "equals" operator is used to compare values.
     |  
     |  __reduce__(self)
     |  
     |  bind_processor(self, dialect)
     |  
     |  compare_values(self, x, y)
     |  
     |  copy_value(self, value)
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  impl = <class 'sqlalchemy.types.LargeBinary'>
     |      A type for large binary byte data.
     |      
     |      The Binary type generates BLOB or BYTEA when tables are created,
     |      and also converts incoming values using the ``Binary`` callable
     |      provided by each DB-API.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MutableType:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeDecorator:
     |  
     |  __getattr__(self, key)
     |      Proxy all other undefined accessors to the underlying
     |      implementation.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      By default, returns self.   This method is called by
     |      the expression system when an object using this type is 
     |      on the left or right side of an expression against a plain Python
     |      object which does not yet have a SQLAlchemy type assigned::
     |      
     |          expr = table.c.somecolumn + 35
     |      
     |      Where above, if ``somecolumn`` uses this type, this method will
     |      be called with the value ``operator.add``
     |      and ``35``.  The return value is whatever SQLAlchemy type should
     |      be used for ``35`` for this particular operation.
     |  
     |  copy(self)
     |      Produce a copy of this :class:`.TypeDecorator` instance.
     |      
     |      This is a shallow copy and is provided to fulfill part of 
     |      the :class:`.TypeEngine` contract.  It usually does not
     |      need to be overridden unless the user-defined :class:`.TypeDecorator`
     |      has local state that should be deep-copied.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the DBAPI type object represented by this :class:`.TypeDecorator`.
     |      
     |      By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the 
     |      underlying "impl".
     |  
     |  load_dialect_impl(self, dialect)
     |      Return a :class:`.TypeEngine` object corresponding to a dialect.
     |      
     |      This is an end-user override hook that can be used to provide
     |      differing types depending on the given dialect.  It is used
     |      by the :class:`.TypeDecorator` implementation of :meth:`type_engine` 
     |      to help determine what type should ultimately be returned
     |      for a given :class:`.TypeDecorator`.
     |      
     |      By default returns ``self.impl``.
     |  
     |  process_bind_param(self, value, dialect)
     |      Receive a bound parameter value to be converted.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed along to the underlying
     |      :class:`.TypeEngine` object, and from there to the 
     |      DBAPI ``execute()`` method.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data. 
     |      This could also be used as a hook for validating logic.
     |      
     |      This operation should be designed with the reverse operation
     |      in mind, which would be the process_result_value method of
     |      this class.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |  
     |  process_result_value(self, value, dialect)
     |      Receive a result-row column value to be converted.
     |      
     |      Subclasses should implement this method to operate on data
     |      fetched from the database.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed back to the application,
     |      given a value that is already processed by
     |      the underlying :class:`.TypeEngine` object, originally
     |      from the DBAPI cursor method ``fetchone()`` or similar.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data. 
     |      This could also be used as a hook for validating logic.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |      
     |      This operation should be designed to be reversible by
     |      the "process_bind_param" method of this class.
     |  
     |  type_engine(self, dialect)
     |      Return a dialect-specific :class:`.TypeEngine` instance for this :class:`.TypeDecorator`.
     |      
     |      In most cases this returns a dialect-adapted form of
     |      the :class:`.TypeEngine` type represented by ``self.impl``.
     |      Makes usage of :meth:`dialect_impl` but also traverses
     |      into wrapped :class:`.TypeDecorator` instances.
     |      Behavior can be customized here by overriding :meth:`load_dialect_impl`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from TypeDecorator:
     |  
     |  __visit_name__ = 'type_decorator'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from TypeEngine:
     |  
     |  python_type
     |      Return the Python type object expected to be returned
     |      by instances of this type, if known.   
     |      
     |      Basically, for those types which enforce a return type,
     |      or are known across the board to do such for all common 
     |      DBAPIs (like ``int`` for example), will return that type.
     |      
     |      If a return type is not defined, raises
     |      ``NotImplementedError``.
     |      
     |      Note that any type also accommodates NULL in SQL which
     |      means you can also get back ``None`` from any type
     |      in practice.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class PrimaryKeyConstraint(ColumnCollectionConstraint)
     |  A table-level PRIMARY KEY constraint.
     |  
     |  Defines a single column or composite PRIMARY KEY constraint. For a
     |  no-frills primary key, adding ``primary_key=True`` to one or more
     |  ``Column`` definitions is a shorthand equivalent for an unnamed single- or
     |  multiple-column PrimaryKeyConstraint.
     |  
     |  Method resolution order:
     |      PrimaryKeyConstraint
     |      ColumnCollectionConstraint
     |      ColumnCollectionMixin
     |      Constraint
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'primary_key_constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ColumnCollectionConstraint:
     |  
     |  __contains__(self, x)
     |  
     |  __init__(self, *columns, **kw)
     |      :param \*columns:
     |        A sequence of column names or Column objects.
     |      
     |      :param name:
     |        Optional, the in-database name of this constraint.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  contains_column(self, col)
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class REAL(Float)
     |  The SQL REAL type.
     |  
     |  Method resolution order:
     |      REAL
     |      Float
     |      Numeric
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'REAL'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Float:
     |  
     |  __init__(self, precision=None, asdecimal=False, **kwargs)
     |      Construct a Float.
     |      
     |      :param precision: the numeric precision for use in DDL ``CREATE
     |         TABLE``.
     |      
     |      :param asdecimal: the same flag as that of :class:`.Numeric`, but
     |        defaults to ``False``.   Note that setting this flag to ``True``
     |        results in floating point conversion.
     |      
     |      :param \**kwargs: deprecated.  Additional arguments here are ignored
     |       by the default :class:`.Float` type.  For database specific 
     |       floats that support additional arguments, see that dialect's 
     |       documentation for details, such as :class:`sqlalchemy.dialects.mysql.FLOAT`.
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from Float:
     |  
     |  scale = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Numeric:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Numeric:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class SMALLINT(SmallInteger)
     |  The SQL SMALLINT type.
     |  
     |  Method resolution order:
     |      SMALLINT
     |      SmallInteger
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'SMALLINT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Sequence(DefaultGenerator)
     |  Represents a named database sequence.
     |  
     |  The :class:`.Sequence` object represents the name and configurational
     |  parameters of a database sequence.   It also represents
     |  a construct that can be "executed" by a SQLAlchemy :class:`.Engine`
     |  or :class:`.Connection`, rendering the appropriate "next value" function
     |  for the target database and returning a result.
     |  
     |  The :class:`.Sequence` is typically associated with a primary key column::
     |  
     |      some_table = Table('some_table', metadata,
     |          Column('id', Integer, Sequence('some_table_seq'), primary_key=True)
     |      )
     |  
     |  When CREATE TABLE is emitted for the above :class:`.Table`, if the
     |  target platform supports sequences, a CREATE SEQUENCE statement will
     |  be emitted as well.   For platforms that don't support sequences,
     |  the :class:`.Sequence` construct is ignored.
     |  
     |  See also: :class:`.CreateSequence` :class:`.DropSequence`
     |  
     |  Method resolution order:
     |      Sequence
     |      DefaultGenerator
     |      _NotAColumnExpr
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, name, start=None, increment=None, schema=None, optional=False, quote=None, metadata=None, quote_schema=None, for_update=False)
     |      Construct a :class:`.Sequence` object.
     |      
     |      :param name: The name of the sequence.
     |      :param start: the starting index of the sequence.  This value is
     |       used when the CREATE SEQUENCE command is emitted to the database
     |       as the value of the "START WITH" clause.   If ``None``, the 
     |       clause is omitted, which on most platforms indicates a starting
     |       value of 1.
     |      :param increment: the increment value of the sequence.  This 
     |       value is used when the CREATE SEQUENCE command is emitted to
     |       the database as the value of the "INCREMENT BY" clause.  If ``None``,
     |       the clause is omitted, which on most platforms indicates an
     |       increment of 1.
     |      :param schema: Optional schema name for the sequence, if located
     |       in a schema other than the default.
     |      :param optional: boolean value, when ``True``, indicates that this
     |       :class:`.Sequence` object only needs to be explicitly generated
     |       on backends that don't provide another way to generate primary
     |       key identifiers.  Currently, it essentially means, "don't create
     |       this sequence on the Postgresql backend, where the SERIAL keyword
     |       creates a sequence for us automatically".
     |      :param quote: boolean value, when ``True`` or ``False``, explicitly
     |       forces quoting of the schema name on or off.  When left at its
     |       default of ``None``, normal quoting rules based on casing and reserved
     |       words take place.
     |      :param metadata: optional :class:`.MetaData` object which will be 
     |       associated with this :class:`.Sequence`.  A :class:`.Sequence`
     |       that is associated with a :class:`.MetaData` gains access to the 
     |       ``bind`` of that :class:`.MetaData`, meaning the :meth:`.Sequence.create`
     |       and :meth:`.Sequence.drop` methods will make usage of that engine
     |       automatically.
     |      
     |       .. versionchanged:: 0.7
     |           Additionally, the appropriate CREATE SEQUENCE/
     |           DROP SEQUENCE DDL commands will be emitted corresponding to this
     |           :class:`.Sequence` when :meth:`.MetaData.create_all` and 
     |           :meth:`.MetaData.drop_all` are invoked.
     |      
     |       Note that when a :class:`.Sequence` is applied to a :class:`.Column`, 
     |       the :class:`.Sequence` is automatically associated with the 
     |       :class:`.MetaData` object of that column's parent :class:`.Table`, 
     |       when that association is made.   The :class:`.Sequence` will then
     |       be subject to automatic CREATE SEQUENCE/DROP SEQUENCE corresponding 
     |       to when the :class:`.Table` object itself is created or dropped,
     |       rather than that of the :class:`.MetaData` object overall.
     |      :param for_update: Indicates this :class:`.Sequence`, when associated
     |       with a :class:`.Column`, should be invoked for UPDATE statements
     |       on that column's table, rather than for INSERT statements, when
     |       no value is otherwise present for that column in the statement.
     |  
     |  create(self, bind=None, checkfirst=True)
     |      Creates this sequence in the database.
     |  
     |  drop(self, bind=None, checkfirst=True)
     |      Drops this sequence from the database.
     |  
     |  is_callable(...)
     |  
     |  is_clause_element(...)
     |  
     |  next_value(self)
     |      Return a :class:`.next_value` function element
     |      which will render the appropriate increment function
     |      for this :class:`.Sequence` within any SQL expression.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'sequence'
     |  
     |  is_sequence = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DefaultGenerator:
     |  
     |  execute(self, bind=None, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from DefaultGenerator:
     |  
     |  column = None
     |  
     |  is_server_default = False
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _NotAColumnExpr:
     |  
     |  __clause_element__ lambda self
     |  
     |  self_group lambda self
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _NotAColumnExpr:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class SmallInteger(Integer)
     |  A type for smaller ``int`` integers.
     |  
     |  Typically generates a ``SMALLINT`` in DDL, and otherwise acts like
     |  a normal :class:`.Integer` on the Python side.
     |  
     |  Method resolution order:
     |      SmallInteger
     |      Integer
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'small_integer'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Integer:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Integer:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __init__(self, *args, **kwargs)
     |      Support implementations that were passing arguments
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class String(Concatenable, TypeEngine)
     |  The base for all string and character types.
     |  
     |  In SQL, corresponds to VARCHAR.  Can also take Python unicode objects
     |  and encode to the database's encoding in bind params (and the reverse for
     |  result sets.)
     |  
     |  The `length` field is usually required when the `String` type is
     |  used within a CREATE TABLE statement, as VARCHAR requires a length
     |  on most databases.
     |  
     |  Method resolution order:
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None, convert_unicode=False, assert_unicode=None, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param convert_unicode: When set to ``True``, the 
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the 
     |        value of the ``encoding`` parameter passed to 
     |        :func:`.create_engine` as the encoding.
     |        
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not 
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`UnicodeText` 
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but 
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param assert_unicode: Deprecated.  A warning is emitted 
     |        when a non-``unicode`` object is passed to the 
     |        :class:`.Unicode` subtype of :class:`.String`, 
     |        or the :class:`.UnicodeText` subtype of :class:`.Text`.   
     |        See :class:`.Unicode` for information on how to 
     |        control this warning.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'string'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class TEXT(Text)
     |  The SQL TEXT type.
     |  
     |  Method resolution order:
     |      TEXT
     |      Text
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'TEXT'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, convert_unicode=False, assert_unicode=None, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param convert_unicode: When set to ``True``, the 
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the 
     |        value of the ``encoding`` parameter passed to 
     |        :func:`.create_engine` as the encoding.
     |        
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not 
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`UnicodeText` 
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but 
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param assert_unicode: Deprecated.  A warning is emitted 
     |        when a non-``unicode`` object is passed to the 
     |        :class:`.Unicode` subtype of :class:`.String`, 
     |        or the :class:`.UnicodeText` subtype of :class:`.Text`.   
     |        See :class:`.Unicode` for information on how to 
     |        control this warning.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class TIME(Time)
     |  The SQL TIME type.
     |  
     |  Method resolution order:
     |      TIME
     |      Time
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'TIME'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from Time:
     |  
     |  __init__(self, timezone=False)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Time:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class TIMESTAMP(DateTime)
     |  The SQL TIMESTAMP type.
     |  
     |  Method resolution order:
     |      TIMESTAMP
     |      DateTime
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'TIMESTAMP'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from DateTime:
     |  
     |  __init__(self, timezone=False)
     |      Construct a new :class:`.DateTime`.
     |      
     |      :param timezone: boolean.  If True, and supported by the
     |      backend, will produce 'TIMESTAMP WITH TIMEZONE'. For backends
     |      that don't support timezone aware timestamps, has no
     |      effect.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from DateTime:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Table(SchemaItem, sqlalchemy.sql.expression.TableClause)
     |  Represent a table in a database.
     |  
     |  e.g.::
     |  
     |      mytable = Table("mytable", metadata, 
     |                      Column('mytable_id', Integer, primary_key=True),
     |                      Column('value', String(50))
     |                 )
     |  
     |  The :class:`.Table` object constructs a unique instance of itself based on its
     |  name and optional schema name within the given :class:`.MetaData` object.
     |  Calling the :class:`.Table`
     |  constructor with the same name and same :class:`.MetaData` argument 
     |  a second time will return the *same* :class:`.Table` object - in this way
     |  the :class:`.Table` constructor acts as a registry function.
     |  
     |  See also:
     |  
     |  :ref:`metadata_describing` - Introduction to database metadata
     |  
     |  Constructor arguments are as follows:
     |  
     |  :param name: The name of this table as represented in the database. 
     |  
     |      This property, along with the *schema*, indicates the *singleton
     |      identity* of this table in relation to its parent :class:`.MetaData`.
     |      Additional calls to :class:`.Table` with the same name, metadata,
     |      and schema name will return the same :class:`.Table` object.
     |  
     |      Names which contain no upper case characters
     |      will be treated as case insensitive names, and will not be quoted
     |      unless they are a reserved word.  Names with any number of upper
     |      case characters will be quoted and sent exactly.  Note that this
     |      behavior applies even for databases which standardize upper 
     |      case names as case insensitive such as Oracle.
     |  
     |  :param metadata: a :class:`.MetaData` object which will contain this 
     |      table.  The metadata is used as a point of association of this table
     |      with other tables which are referenced via foreign key.  It also
     |      may be used to associate this table with a particular 
     |      :class:`~sqlalchemy.engine.base.Connectable`.
     |  
     |  :param \*args: Additional positional arguments are used primarily
     |      to add the list of :class:`.Column` objects contained within this
     |      table. Similar to the style of a CREATE TABLE statement, other
     |      :class:`.SchemaItem` constructs may be added here, including
     |      :class:`.PrimaryKeyConstraint`, and :class:`.ForeignKeyConstraint`.
     |  
     |  :param autoload: Defaults to False: the Columns for this table should 
     |      be reflected from the database. Usually there will be no Column
     |      objects in the constructor if this property is set.
     |  
     |  :param autoload_replace: If ``True``, when using ``autoload=True`` 
     |      and ``extend_existing=True``,
     |      replace ``Column`` objects already present in the ``Table`` that's
     |      in the ``MetaData`` registry with 
     |      what's reflected.  Otherwise, all existing columns will be
     |      excluded from the reflection process.    Note that this does
     |      not impact ``Column`` objects specified in the same call to ``Table``
     |      which includes ``autoload``, those always take precedence.
     |      Defaults to ``True``.
     |  
     |      .. versionadded:: 0.7.5
     |  
     |  :param autoload_with: If autoload==True, this is an optional Engine 
     |      or Connection instance to be used for the table reflection. If
     |      ``None``, the underlying MetaData's bound connectable will be used.
     |  
     |  :param extend_existing: When ``True``, indicates that if this :class:`.Table` is already
     |      present in the given :class:`.MetaData`, apply further arguments within
     |      the constructor to the existing :class:`.Table`.
     |  
     |      If ``extend_existing`` or ``keep_existing`` are not set, an error is
     |      raised if additional table modifiers are specified when 
     |      the given :class:`.Table` is already present in the :class:`.MetaData`.
     |  
     |      .. versionchanged:: 0.7.4
     |          ``extend_existing`` will work in conjunction
     |          with ``autoload=True`` to run a new reflection operation against
     |          the database; new :class:`.Column` objects will be produced
     |          from database metadata to replace those existing with the same
     |          name, and additional :class:`.Column` objects not present
     |          in the :class:`.Table` will be added.
     |  
     |      As is always the case with ``autoload=True``, :class:`.Column`
     |      objects can be specified in the same :class:`.Table` constructor,
     |      which will take precedence.  I.e.::
     |  
     |          Table("mytable", metadata,
     |                      Column('y', Integer),
     |                      extend_existing=True,
     |                      autoload=True,
     |                      autoload_with=engine
     |                  )
     |  
     |      The above will overwrite all columns within ``mytable`` which 
     |      are present in the database, except for ``y`` which will be used as is
     |      from the above definition.   If the ``autoload_replace`` flag
     |      is set to False, no existing columns will be replaced.
     |  
     |  :param implicit_returning: True by default - indicates that 
     |      RETURNING can be used by default to fetch newly inserted primary key 
     |      values, for backends which support this.  Note that 
     |      create_engine() also provides an implicit_returning flag.
     |  
     |  :param include_columns: A list of strings indicating a subset of 
     |      columns to be loaded via the ``autoload`` operation; table columns who
     |      aren't present in this list will not be represented on the resulting
     |      ``Table`` object. Defaults to ``None`` which indicates all columns
     |      should be reflected.
     |  
     |  :param info: A dictionary which defaults to ``{}``.  A space to store
     |      application specific data. This must be a dictionary.
     |  
     |  :param keep_existing: When ``True``, indicates that if this Table 
     |      is already present in the given :class:`.MetaData`, ignore
     |      further arguments within the constructor to the existing
     |      :class:`.Table`, and return the :class:`.Table` object as
     |      originally created. This is to allow a function that wishes
     |      to define a new :class:`.Table` on first call, but on
     |      subsequent calls will return the same :class:`.Table`,
     |      without any of the declarations (particularly constraints)
     |      being applied a second time. Also see extend_existing.
     |  
     |      If extend_existing or keep_existing are not set, an error is
     |      raised if additional table modifiers are specified when 
     |      the given :class:`.Table` is already present in the :class:`.MetaData`.
     |  
     |  :param listeners: A list of tuples of the form ``(<eventname>, <fn>)``
     |      which will be passed to :func:`.event.listen` upon construction. 
     |      This alternate hook to :func:`.event.listen` allows the establishment
     |      of a listener function specific to this :class:`.Table` before 
     |      the "autoload" process begins.  Particularly useful for
     |      the :meth:`.events.column_reflect` event::
     |  
     |          def listen_for_reflect(table, column_info):
     |              "handle the column reflection event"
     |              # ...
     |  
     |          t = Table(
     |              'sometable', 
     |              autoload=True,
     |              listeners=[
     |                  ('column_reflect', listen_for_reflect)
     |              ])
     |  
     |  :param mustexist: When ``True``, indicates that this Table must already 
     |      be present in the given :class:`.MetaData`` collection, else
     |      an exception is raised.
     |  
     |  :param prefixes:
     |      A list of strings to insert after CREATE in the CREATE TABLE
     |      statement.  They will be separated by spaces.
     |  
     |  :param quote: Force quoting of this table's name on or off, corresponding
     |      to ``True`` or ``False``.  When left at its default of ``None``,
     |      the column identifier will be quoted according to whether the name is
     |      case sensitive (identifiers with at least one upper case character are 
     |      treated as case sensitive), or if it's a reserved word.  This flag 
     |      is only needed to force quoting of a reserved word which is not known
     |      by the SQLAlchemy dialect.
     |  
     |  :param quote_schema: same as 'quote' but applies to the schema identifier.
     |  
     |  :param schema: The *schema name* for this table, which is required if 
     |      the table resides in a schema other than the default selected schema
     |      for the engine's database connection. Defaults to ``None``.
     |  
     |  :param useexisting: Deprecated.  Use extend_existing.
     |  
     |  Method resolution order:
     |      Table
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.expression.TableClause
     |      sqlalchemy.sql.expression._Immutable
     |      sqlalchemy.sql.expression.FromClause
     |      sqlalchemy.sql.expression.Selectable
     |      sqlalchemy.sql.expression.ClauseElement
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, *args, **kw)
     |      Constructor for :class:`~.schema.Table`.
     |      
     |      This method is a no-op.   See the top-level
     |      documentation for :class:`~.schema.Table`
     |      for constructor arguments.
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  add_is_dependent_on(self, table)
     |      Add a 'dependency' for this Table.
     |      
     |      This is another Table object which must be created
     |      first before this one can, or dropped after this one.
     |      
     |      Usually, dependencies between tables are determined via 
     |      ForeignKey objects.   However, for other situations that 
     |      create dependencies outside of foreign keys (rules, inheriting),
     |      this method can manually establish such a link.
     |  
     |  append_column(self, column)
     |      Append a :class:`~.schema.Column` to this :class:`~.schema.Table`.
     |      
     |      The "key" of the newly added :class:`~.schema.Column`, i.e. the
     |      value of its ``.key`` attribute, will then be available
     |      in the ``.c`` collection of this :class:`~.schema.Table`, and the
     |      column definition will be included in any CREATE TABLE, SELECT,
     |      UPDATE, etc. statements generated from this :class:`~.schema.Table`
     |      construct.
     |      
     |      Note that this does **not** change the definition of the table 
     |      as it exists within any underlying database, assuming that
     |      table has already been created in the database.   Relational 
     |      databases support the addition of columns to existing tables 
     |      using the SQL ALTER command, which would need to be 
     |      emitted for an already-existing table that doesn't contain
     |      the newly added column.
     |  
     |  append_constraint(self, constraint)
     |      Append a :class:`~.schema.Constraint` to this :class:`~.schema.Table`.
     |      
     |      This has the effect of the constraint being included in any
     |      future CREATE TABLE statement, assuming specific DDL creation 
     |      events have not been associated with the given :class:`~.schema.Constraint` 
     |      object.
     |      
     |      Note that this does **not** produce the constraint within the 
     |      relational database automatically, for a table that already exists
     |      in the database.   To add a constraint to an
     |      existing relational database table, the SQL ALTER command must
     |      be used.  SQLAlchemy also provides the :class:`.AddConstraint` construct
     |      which can produce this SQL when invoked as an executable clause.
     |  
     |  append_ddl_listener(self, event_name, listener)
     |      Append a DDL event listener to this ``Table``.
     |      
     |      Deprecated.  See :class:`.DDLEvents`.
     |  
     |  create(self, bind=None, checkfirst=False)
     |      Issue a ``CREATE`` statement for this 
     |      :class:`.Table`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      See also :meth:`.MetaData.create_all`.
     |  
     |  drop(self, bind=None, checkfirst=False)
     |      Issue a ``DROP`` statement for this 
     |      :class:`.Table`, using the given :class:`.Connectable`
     |      for connectivity.
     |      
     |      See also :meth:`.MetaData.drop_all`.
     |  
     |  exists(self, bind=None)
     |      Return True if this table exists.
     |  
     |  get_children(self, column_collections=True, schema_visitor=False, **kw)
     |  
     |  tometadata(self, metadata, schema=<symbol 'retain_schema>)
     |      Return a copy of this :class:`.Table` associated with a different
     |      :class:`.MetaData`.
     |      
     |      E.g.::
     |      
     |          # create two metadata
     |          meta1 = MetaData('sqlite:///querytest.db')
     |          meta2 = MetaData()
     |      
     |          # load 'users' from the sqlite engine
     |          users_table = Table('users', meta1, autoload=True)
     |      
     |          # create the same Table object for the plain metadata
     |          users_table_2 = users_table.tometadata(meta2)
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  __new__(cls, *args, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      Return the connectable associated with this Table.
     |  
     |  key
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'table'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.TableClause:
     |  
     |  count(self, whereclause=None, **params)
     |      return a SELECT COUNT generated against this
     |      :class:`.TableClause`.
     |  
     |  delete(self, whereclause=None, **kwargs)
     |      Generate a :func:`.delete` construct against this
     |      :class:`.TableClause`.
     |      
     |      E.g.::
     |      
     |          table.delete().where(table.c.id==7)
     |      
     |      See :func:`.delete` for argument and usage information.
     |  
     |  description(...)
     |  
     |  insert(self, values=None, inline=False, **kwargs)
     |      Generate an :func:`.insert` construct against this
     |      :class:`.TableClause`.
     |      
     |      E.g.::
     |      
     |          table.insert().values(name='foo')
     |      
     |      See :func:`.insert` for argument and usage information.
     |  
     |  update(self, whereclause=None, values=None, inline=False, **kwargs)
     |      Generate an :func:`.update` construct against this
     |      :class:`.TableClause`.
     |      
     |      E.g.::
     |      
     |          table.update().where(table.c.id==7).values(name='foo')
     |      
     |      See :func:`.update` for argument and usage information.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.TableClause:
     |  
     |  named_with_column = True
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression._Immutable:
     |  
     |  params(self, *optionaldict, **kwargs)
     |  
     |  unique_params(self, *optionaldict, **kwargs)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.FromClause:
     |  
     |  alias(self, name=None)
     |      return an alias of this :class:`.FromClause`.
     |      
     |      This is shorthand for calling::
     |      
     |          from sqlalchemy import alias
     |          a = alias(self, name=name)
     |      
     |      See :func:`~.expression.alias` for details.
     |  
     |  columns(...)
     |      Return the collection of Column objects contained by this
     |      FromClause.
     |  
     |  correspond_on_equivalents(self, column, equivalents)
     |      Return corresponding_column for the given column, or if None
     |      search for a match in the given dictionary.
     |  
     |  corresponding_column(self, column, require_embedded=False)
     |      Given a :class:`.ColumnElement`, return the exported
     |      :class:`.ColumnElement` object from this :class:`.Selectable`
     |      which corresponds to that original
     |      :class:`~sqlalchemy.schema.Column` via a common ancestor
     |      column.
     |      
     |      :param column: the target :class:`.ColumnElement` to be matched
     |      
     |      :param require_embedded: only return corresponding columns for
     |      the given :class:`.ColumnElement`, if the given
     |      :class:`.ColumnElement` is actually present within a sub-element
     |      of this :class:`.FromClause`.  Normally the column will match if
     |      it merely shares a common ancestor with one of the exported
     |      columns of this :class:`.FromClause`.
     |  
     |  foreign_keys(...)
     |      Return the collection of ForeignKey objects which this
     |      FromClause references.
     |  
     |  is_derived_from(self, fromclause)
     |      Return True if this FromClause is 'derived' from the given
     |      FromClause.
     |      
     |      An example would be an Alias of a Table is derived from that Table.
     |  
     |  join(self, right, onclause=None, isouter=False)
     |      return a join of this :class:`.FromClause` against another
     |      :class:`.FromClause`.
     |  
     |  outerjoin(self, right, onclause=None)
     |      return an outer join of this :class:`.FromClause` against another
     |      :class:`.FromClause`.
     |  
     |  primary_key(...)
     |      Return the collection of Column objects which comprise the
     |      primary key of this FromClause.
     |  
     |  replace_selectable(self, old, alias)
     |      replace all occurrences of FromClause 'old' with the given Alias 
     |      object, returning a copy of this :class:`.FromClause`.
     |  
     |  select(self, whereclause=None, **params)
     |      return a SELECT of this :class:`.FromClause`.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.expression.FromClause:
     |  
     |  c
     |      attrgetter(attr, ...) --> attrgetter object
     |      
     |      Return a callable object that fetches the given attribute(s) from its operand.
     |      After, f=attrgetter('name'), the call f(r) returns r.name.
     |      After, g=attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
     |      After, h=attrgetter('name.first', 'name.last'), the call h(r) returns
     |      (r.name.first, r.name.last).
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.FromClause:
     |  
     |  schema = None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from sqlalchemy.sql.expression.ClauseElement:
     |  
     |  __and__(self, other)
     |  
     |  __getstate__(self)
     |  
     |  __invert__(self)
     |  
     |  __nonzero__(self)
     |  
     |  __or__(self, other)
     |  
     |  compare(self, other, **kw)
     |      Compare this ClauseElement to the given ClauseElement.
     |      
     |      Subclasses should override the default behavior, which is a
     |      straight identity comparison.
     |      
     |      \**kw are arguments consumed by subclass compare() methods and
     |      may be used to modify the criteria for comparison.
     |      (see :class:`.ColumnElement`)
     |  
     |  compile(self, bind=None, dialect=None, **kw)
     |      Compile this SQL expression.
     |      
     |      The return value is a :class:`~sqlalchemy.engine.Compiled` object.
     |      Calling ``str()`` or ``unicode()`` on the returned value will yield a
     |      string representation of the result. The
     |      :class:`~sqlalchemy.engine.Compiled` object also can return a
     |      dictionary of bind parameter names and values
     |      using the ``params`` accessor.
     |      
     |      :param bind: An ``Engine`` or ``Connection`` from which a
     |          ``Compiled`` will be acquired. This argument takes precedence over
     |          this :class:`.ClauseElement`'s bound engine, if any.
     |      
     |      :param column_keys: Used for INSERT and UPDATE statements, a list of
     |          column names which should be present in the VALUES clause of the
     |          compiled statement. If ``None``, all columns from the target table
     |          object are rendered.
     |      
     |      :param dialect: A ``Dialect`` instance from which a ``Compiled``
     |          will be acquired. This argument takes precedence over the `bind`
     |          argument as well as this :class:`.ClauseElement`'s bound engine, if
     |          any.
     |      
     |      :param inline: Used for INSERT statements, for a dialect which does
     |          not support inline retrieval of newly generated primary key
     |          columns, will force the expression used to create the new primary
     |          key value to be rendered inline within the INSERT statement's
     |          VALUES clause. This typically refers to Sequence execution but may
     |          also refer to any server-side default generation function
     |          associated with a primary key `Column`.
     |  
     |  execute(self, *multiparams, **params)
     |      Compile and execute this :class:`.ClauseElement`.
     |      
     |      .. deprecated:: 0.7 Only SQL expressions which subclass :class:`.Executable` may provide the :func:`.execute` method.
     |  
     |  scalar(self, *multiparams, **params)
     |      Compile and execute this :class:`.ClauseElement`, returning
     |      
     |      .. deprecated:: 0.7 Only SQL expressions which subclass :class:`.Executable` may provide the :func:`.scalar` method.
     |      the result's scalar representation.
     |  
     |  self_group(self, against=None)
     |      Apply a 'grouping' to this :class:`.ClauseElement`.
     |      
     |      This method is overridden by subclasses to return a 
     |      "grouping" construct, i.e. parenthesis.   In particular
     |      it's used by "binary" expressions to provide a grouping
     |      around themselves when placed into a larger expression, 
     |      as well as by :func:`.select` constructs when placed into
     |      the FROM clause of another :func:`.select`.  (Note that 
     |      subqueries should be normally created using the 
     |      :func:`.Select.alias` method, as many platforms require
     |      nested SELECT statements to be named).
     |      
     |      As expressions are composed together, the application of
     |      :meth:`self_group` is automatic - end-user code should never 
     |      need to use this method directly.  Note that SQLAlchemy's
     |      clause constructs take operator precedence into account - 
     |      so parenthesis might not be needed, for example, in 
     |      an expression like ``x OR (y AND z)`` - AND takes precedence
     |      over OR.
     |      
     |      The base :meth:`self_group` method of :class:`.ClauseElement`
     |      just returns self.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.expression.ClauseElement:
     |  
     |  supports_execution = False
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Text(String)
     |  A variably sized string type.
     |  
     |  In SQL, usually corresponds to CLOB or TEXT. Can also take Python
     |  unicode objects and encode to the database's encoding in bind
     |  params (and the reverse for result sets.)
     |  
     |  Method resolution order:
     |      Text
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'text'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, convert_unicode=False, assert_unicode=None, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param convert_unicode: When set to ``True``, the 
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the 
     |        value of the ``encoding`` parameter passed to 
     |        :func:`.create_engine` as the encoding.
     |        
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not 
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`UnicodeText` 
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but 
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param assert_unicode: Deprecated.  A warning is emitted 
     |        when a non-``unicode`` object is passed to the 
     |        :class:`.Unicode` subtype of :class:`.String`, 
     |        or the :class:`.UnicodeText` subtype of :class:`.Text`.   
     |        See :class:`.Unicode` for information on how to 
     |        control this warning.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class ThreadLocalMetaData(MetaData)
     |  A MetaData variant that presents a different ``bind`` in every thread.
     |  
     |  Makes the ``bind`` property of the MetaData a thread-local value, allowing
     |  this collection of tables to be bound to different ``Engine``
     |  implementations or connections in each thread.
     |  
     |  The ThreadLocalMetaData starts off bound to None in each thread.  Binds
     |  must be made explicitly by assigning to the ``bind`` property or using
     |  ``connect()``.  You can also re-bind dynamically multiple times per
     |  thread, just like a regular ``MetaData``.
     |  
     |  Method resolution order:
     |      ThreadLocalMetaData
     |      MetaData
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Construct a ThreadLocalMetaData.
     |  
     |  dispose(self)
     |      Dispose all bound engines, in all thread contexts.
     |  
     |  is_bound(self)
     |      True if there is a bind for this thread.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  bind
     |      The bound Engine or Connection for this thread.
     |      
     |      This property may be assigned an Engine or Connection, or assigned a
     |      string or URL to automatically create a basic Engine for this bind
     |      with ``create_engine()``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'metadata'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from MetaData:
     |  
     |  __contains__(self, table_or_key)
     |  
     |  __getstate__(self)
     |  
     |  __repr__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  append_ddl_listener(self, event_name, listener)
     |      Append a DDL event listener to this ``MetaData``.
     |      
     |      Deprecated.  See :class:`.DDLEvents`.
     |  
     |  clear(self)
     |      Clear all Table objects from this MetaData.
     |  
     |  create_all(self, bind=None, tables=None, checkfirst=True)
     |      Create all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to recreate tables already
     |      present in the target database.
     |      
     |      :param bind:
     |        A :class:`~sqlalchemy.engine.base.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the total
     |        tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, don't issue CREATEs for tables already present
     |        in the target database.
     |  
     |  drop_all(self, bind=None, tables=None, checkfirst=True)
     |      Drop all tables stored in this metadata.
     |      
     |      Conditional by default, will not attempt to drop tables not present in
     |      the target database.
     |      
     |      :param bind:
     |        A :class:`~sqlalchemy.engine.base.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param tables:
     |        Optional list of ``Table`` objects, which is a subset of the
     |        total tables in the ``MetaData`` (others are ignored).
     |      
     |      :param checkfirst:
     |        Defaults to True, only issue DROPs for tables confirmed to be
     |        present in the target database.
     |  
     |  reflect(self, bind=None, schema=None, views=False, only=None)
     |      Load all available table definitions from the database.
     |      
     |      Automatically creates ``Table`` entries in this ``MetaData`` for any
     |      table available in the database but not yet present in the
     |      ``MetaData``.  May be called multiple times to pick up tables recently
     |      added to the database, however no special action is taken if a table
     |      in this ``MetaData`` no longer exists in the database.
     |      
     |      :param bind:
     |        A :class:`~sqlalchemy.engine.base.Connectable` used to access the
     |        database; if None, uses the existing bind on this ``MetaData``, if
     |        any.
     |      
     |      :param schema:
     |        Optional, query and reflect tables from an alterate schema.
     |        If None, the schema associated with this :class:`.MetaData`
     |        is used, if any.
     |      
     |      :param views:
     |        If True, also reflect views.
     |      
     |      :param only:
     |        Optional.  Load only a sub-set of available named tables.  May be
     |        specified as a sequence of names or a callable.
     |      
     |        If a sequence of names is provided, only those tables will be
     |        reflected.  An error is raised if a table is requested but not
     |        available.  Named tables already present in this ``MetaData`` are
     |        ignored.
     |      
     |        If a callable is provided, it will be used as a boolean predicate to
     |        filter the list of potential table names.  The callable is called
     |        with a table name and this ``MetaData`` instance as positional
     |        arguments and should return a true value for any table to reflect.
     |  
     |  remove(self, table)
     |      Remove the given Table object from this MetaData.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from MetaData:
     |  
     |  sorted_tables
     |      Returns a list of ``Table`` objects sorted in order of
     |      dependency.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Time(_DateAffinity, TypeEngine)
     |  A type for ``datetime.time()`` objects.
     |  
     |  Method resolution order:
     |      Time
     |      _DateAffinity
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, timezone=False)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'time'
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _DateAffinity:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  bind_processor(self, dialect)
     |      Return a conversion function for processing bind values.
     |      
     |      Returns a callable which will receive a bind parameter value
     |      as the sole positional argument and will return a value to
     |      send to the DB-API.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  result_processor(self, dialect, coltype)
     |      Return a conversion function for processing result row values.
     |      
     |      Returns a callable which will receive a result row column
     |      value as the sole positional argument and will return a value
     |      to return to the user.
     |      
     |      If processing is not necessary, the method should return ``None``.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      :param coltype: DBAPI coltype argument received in cursor.description.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class TypeDecorator(TypeEngine)
     |  Allows the creation of types which add additional functionality
     |  to an existing type.
     |  
     |  This method is preferred to direct subclassing of SQLAlchemy's
     |  built-in types as it ensures that all required functionality of 
     |  the underlying type is kept in place.
     |  
     |  Typical usage::
     |  
     |    import sqlalchemy.types as types
     |  
     |    class MyType(types.TypeDecorator):
     |        '''Prefixes Unicode values with "PREFIX:" on the way in and
     |        strips it off on the way out.
     |        '''
     |  
     |        impl = types.Unicode
     |  
     |        def process_bind_param(self, value, dialect):
     |            return "PREFIX:" + value
     |  
     |        def process_result_value(self, value, dialect):
     |            return value[7:]
     |  
     |        def copy(self):
     |            return MyType(self.impl.length)
     |  
     |  The class-level "impl" attribute is required, and can reference any
     |  TypeEngine class.  Alternatively, the load_dialect_impl() method
     |  can be used to provide different type classes based on the dialect
     |  given; in this case, the "impl" variable can reference
     |  ``TypeEngine`` as a placeholder.
     |  
     |  Types that receive a Python type that isn't similar to the ultimate type
     |  used may want to define the :meth:`TypeDecorator.coerce_compared_value`
     |  method. This is used to give the expression system a hint when coercing
     |  Python objects into bind parameters within expressions. Consider this
     |  expression::
     |  
     |      mytable.c.somecol + datetime.date(2009, 5, 15)
     |  
     |  Above, if "somecol" is an ``Integer`` variant, it makes sense that 
     |  we're doing date arithmetic, where above is usually interpreted
     |  by databases as adding a number of days to the given date. 
     |  The expression system does the right thing by not attempting to
     |  coerce the "date()" value into an integer-oriented bind parameter.
     |  
     |  However, in the case of ``TypeDecorator``, we are usually changing an
     |  incoming Python type to something new - ``TypeDecorator`` by default will
     |  "coerce" the non-typed side to be the same type as itself. Such as below,
     |  we define an "epoch" type that stores a date value as an integer::
     |  
     |      class MyEpochType(types.TypeDecorator):
     |          impl = types.Integer
     |  
     |          epoch = datetime.date(1970, 1, 1)
     |  
     |          def process_bind_param(self, value, dialect):
     |              return (value - self.epoch).days
     |  
     |          def process_result_value(self, value, dialect):
     |              return self.epoch + timedelta(days=value)
     |  
     |  Our expression of ``somecol + date`` with the above type will coerce the
     |  "date" on the right side to also be treated as ``MyEpochType``.
     |  
     |  This behavior can be overridden via the
     |  :meth:`~TypeDecorator.coerce_compared_value` method, which returns a type
     |  that should be used for the value of the expression. Below we set it such
     |  that an integer value will be treated as an ``Integer``, and any other
     |  value is assumed to be a date and will be treated as a ``MyEpochType``::
     |  
     |      def coerce_compared_value(self, op, value):
     |          if isinstance(value, int):
     |              return Integer()
     |          else:
     |              return self
     |  
     |  Method resolution order:
     |      TypeDecorator
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __getattr__(self, key)
     |      Proxy all other undefined accessors to the underlying
     |      implementation.
     |  
     |  __init__(self, *args, **kwargs)
     |      Construct a :class:`.TypeDecorator`.
     |      
     |      Arguments sent here are passed to the constructor 
     |      of the class assigned to the ``impl`` class level attribute,
     |      assuming the ``impl`` is a callable, and the resulting
     |      object is assigned to the ``self.impl`` instance attribute
     |      (thus overriding the class attribute of the same name).
     |      
     |      If the class level ``impl`` is not a callable (the unusual case),
     |      it will be assigned to the same instance attribute 'as-is', 
     |      ignoring those arguments passed to the constructor.
     |      
     |      Subclasses can override this to customize the generation
     |      of ``self.impl`` entirely.
     |  
     |  bind_processor(self, dialect)
     |      Provide a bound value processing function for the 
     |      given :class:`.Dialect`.
     |      
     |      This is the method that fulfills the :class:`.TypeEngine` 
     |      contract for bound value conversion.   :class:`.TypeDecorator`
     |      will wrap a user-defined implementation of 
     |      :meth:`process_bind_param` here.
     |      
     |      User-defined code can override this method directly,
     |      though its likely best to use :meth:`process_bind_param` so that
     |      the processing provided by ``self.impl`` is maintained.
     |      
     |      :param dialect: Dialect instance in use.
     |      
     |      This method is the reverse counterpart to the
     |      :meth:`result_processor` method of this class.
     |  
     |  coerce_compared_value(self, op, value)
     |      Suggest a type for a 'coerced' Python value in an expression.
     |      
     |      By default, returns self.   This method is called by
     |      the expression system when an object using this type is 
     |      on the left or right side of an expression against a plain Python
     |      object which does not yet have a SQLAlchemy type assigned::
     |      
     |          expr = table.c.somecolumn + 35
     |      
     |      Where above, if ``somecolumn`` uses this type, this method will
     |      be called with the value ``operator.add``
     |      and ``35``.  The return value is whatever SQLAlchemy type should
     |      be used for ``35`` for this particular operation.
     |  
     |  compare_values(self, x, y)
     |      Given two values, compare them for equality.
     |      
     |      By default this calls upon :meth:`.TypeEngine.compare_values` 
     |      of the underlying "impl", which in turn usually
     |      uses the Python equals operator ``==``.
     |      
     |      This function is used by the ORM to compare
     |      an original-loaded value with an intercepted
     |      "changed" value, to determine if a net change
     |      has occurred.
     |  
     |  copy(self)
     |      Produce a copy of this :class:`.TypeDecorator` instance.
     |      
     |      This is a shallow copy and is provided to fulfill part of 
     |      the :class:`.TypeEngine` contract.  It usually does not
     |      need to be overridden unless the user-defined :class:`.TypeDecorator`
     |      has local state that should be deep-copied.
     |  
     |  copy_value(self, value)
     |      Given a value, produce a copy of it.
     |      
     |      By default this calls upon :meth:`.TypeEngine.copy_value` 
     |      of the underlying "impl".
     |      
     |      :meth:`.copy_value` will return the object
     |      itself, assuming "mutability" is not enabled.
     |      Only the :class:`.MutableType` mixin provides a copy 
     |      function that actually produces a new object.
     |      The copying function is used by the ORM when
     |      "mutable" types are used, to memoize the original
     |      version of an object as loaded from the database,
     |      which is then compared to the possibly mutated
     |      version to check for changes.
     |      
     |      Modern implementations should use the 
     |      ``sqlalchemy.ext.mutable`` extension described in
     |      :ref:`mutable_toplevel` for intercepting in-place
     |      changes to values.
     |  
     |  get_dbapi_type(self, dbapi)
     |      Return the DBAPI type object represented by this :class:`.TypeDecorator`.
     |      
     |      By default this calls upon :meth:`.TypeEngine.get_dbapi_type` of the 
     |      underlying "impl".
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |  
     |  load_dialect_impl(self, dialect)
     |      Return a :class:`.TypeEngine` object corresponding to a dialect.
     |      
     |      This is an end-user override hook that can be used to provide
     |      differing types depending on the given dialect.  It is used
     |      by the :class:`.TypeDecorator` implementation of :meth:`type_engine` 
     |      to help determine what type should ultimately be returned
     |      for a given :class:`.TypeDecorator`.
     |      
     |      By default returns ``self.impl``.
     |  
     |  process_bind_param(self, value, dialect)
     |      Receive a bound parameter value to be converted.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed along to the underlying
     |      :class:`.TypeEngine` object, and from there to the 
     |      DBAPI ``execute()`` method.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data. 
     |      This could also be used as a hook for validating logic.
     |      
     |      This operation should be designed with the reverse operation
     |      in mind, which would be the process_result_value method of
     |      this class.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |  
     |  process_result_value(self, value, dialect)
     |      Receive a result-row column value to be converted.
     |      
     |      Subclasses should implement this method to operate on data
     |      fetched from the database.
     |      
     |      Subclasses override this method to return the
     |      value that should be passed back to the application,
     |      given a value that is already processed by
     |      the underlying :class:`.TypeEngine` object, originally
     |      from the DBAPI cursor method ``fetchone()`` or similar.
     |      
     |      The operation could be anything desired to perform custom
     |      behavior, such as transforming or serializing data. 
     |      This could also be used as a hook for validating logic.
     |      
     |      :param value: Data to operate upon, of any type expected by
     |       this method in the subclass.  Can be ``None``.
     |      :param dialect: the :class:`.Dialect` in use.
     |      
     |      This operation should be designed to be reversible by
     |      the "process_bind_param" method of this class.
     |  
     |  result_processor(self, dialect, coltype)
     |      Provide a result value processing function for the given :class:`.Dialect`.
     |      
     |      This is the method that fulfills the :class:`.TypeEngine` 
     |      contract for result value conversion.   :class:`.TypeDecorator`
     |      will wrap a user-defined implementation of 
     |      :meth:`process_result_value` here.
     |      
     |      User-defined code can override this method directly,
     |      though its likely best to use :meth:`process_result_value` so that
     |      the processing provided by ``self.impl`` is maintained.
     |      
     |      :param dialect: Dialect instance in use.
     |      :param coltype: An SQLAlchemy data type
     |      
     |      This method is the reverse counterpart to the
     |      :meth:`bind_processor` method of this class.
     |  
     |  type_engine(self, dialect)
     |      Return a dialect-specific :class:`.TypeEngine` instance for this :class:`.TypeDecorator`.
     |      
     |      In most cases this returns a dialect-adapted form of
     |      the :class:`.TypeEngine` type represented by ``self.impl``.
     |      Makes usage of :meth:`dialect_impl` but also traverses
     |      into wrapped :class:`.TypeDecorator` instances.
     |      Behavior can be customized here by overriding :meth:`load_dialect_impl`.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'type_decorator'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from TypeEngine:
     |  
     |  python_type
     |      Return the Python type object expected to be returned
     |      by instances of this type, if known.   
     |      
     |      Basically, for those types which enforce a return type,
     |      or are known across the board to do such for all common 
     |      DBAPIs (like ``int`` for example), will return that type.
     |      
     |      If a return type is not defined, raises
     |      ``NotImplementedError``.
     |      
     |      Note that any type also accommodates NULL in SQL which
     |      means you can also get back ``None`` from any type
     |      in practice.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class Unicode(String)
     |  A variable length Unicode string type.
     |  
     |  The :class:`.Unicode` type is a :class:`.String` subclass
     |  that assumes input and output as Python ``unicode`` data,
     |  and in that regard is equivalent to the usage of the
     |  ``convert_unicode`` flag with the :class:`.String` type.
     |  However, unlike plain :class:`.String`, it also implies an 
     |  underlying column type that is explicitly supporting of non-ASCII
     |  data, such as ``NVARCHAR`` on Oracle and SQL Server.
     |  This can impact the output of ``CREATE TABLE`` statements 
     |  and ``CAST`` functions at the dialect level, and can 
     |  also affect the handling of bound parameters in some
     |  specific DBAPI scenarios.
     |  
     |  The encoding used by the :class:`.Unicode` type is usually
     |  determined by the DBAPI itself; most modern DBAPIs 
     |  feature support for Python ``unicode`` objects as bound
     |  values and result set values, and the encoding should
     |  be configured as detailed in the notes for the target
     |  DBAPI in the :ref:`dialect_toplevel` section.
     |  
     |  For those DBAPIs which do not support, or are not configured
     |  to accommodate Python ``unicode`` objects
     |  directly, SQLAlchemy does the encoding and decoding
     |  outside of the DBAPI.   The encoding in this scenario 
     |  is determined by the ``encoding`` flag passed to 
     |  :func:`.create_engine`.
     |  
     |  When using the :class:`.Unicode` type, it is only appropriate 
     |  to pass Python ``unicode`` objects, and not plain ``str``.
     |  If a plain ``str`` is passed under Python 2, a warning
     |  is emitted.  If you notice your application emitting these warnings but 
     |  you're not sure of the source of them, the Python 
     |  ``warnings`` filter, documented at 
     |  http://docs.python.org/library/warnings.html, 
     |  can be used to turn these warnings into exceptions 
     |  which will illustrate a stack trace::
     |  
     |    import warnings
     |    warnings.simplefilter('error')
     |  
     |  For an application that wishes to pass plain bytestrings
     |  and Python ``unicode`` objects to the ``Unicode`` type
     |  equally, the bytestrings must first be decoded into 
     |  unicode.  The recipe at :ref:`coerce_to_unicode` illustrates
     |  how this is done.
     |  
     |  See also:
     |  
     |      :class:`.UnicodeText` - unlengthed textual counterpart
     |      to :class:`.Unicode`.
     |  
     |  Method resolution order:
     |      Unicode
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a :class:`.Unicode` object.
     |      
     |      Parameters are the same as that of :class:`.String`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'unicode'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class UnicodeText(Text)
     |  An unbounded-length Unicode string type.
     |  
     |  See :class:`.Unicode` for details on the unicode
     |  behavior of this object.
     |  
     |  Like :class:`.Unicode`, usage the :class:`.UnicodeText` type implies a 
     |  unicode-capable type being used on the backend, such as 
     |  ``NCLOB``, ``NTEXT``.
     |  
     |  Method resolution order:
     |      UnicodeText
     |      Text
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, length=None, **kwargs)
     |      Create a Unicode-converting Text type.
     |      
     |      Parameters are the same as that of :class:`.Text`,
     |      with the exception that ``convert_unicode``
     |      defaults to ``True``.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'unicode_text'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class UniqueConstraint(ColumnCollectionConstraint)
     |  A table-level UNIQUE constraint.
     |  
     |  Defines a single column or composite UNIQUE constraint. For a no-frills,
     |  single column constraint, adding ``unique=True`` to the ``Column``
     |  definition is a shorthand equivalent for an unnamed, single column
     |  UniqueConstraint.
     |  
     |  Method resolution order:
     |      UniqueConstraint
     |      ColumnCollectionConstraint
     |      ColumnCollectionMixin
     |      Constraint
     |      SchemaItem
     |      sqlalchemy.events.SchemaEventTarget
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'unique_constraint'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from ColumnCollectionConstraint:
     |  
     |  __contains__(self, x)
     |  
     |  __init__(self, *columns, **kw)
     |      :param \*columns:
     |        A sequence of column names or Column objects.
     |      
     |      :param name:
     |        Optional, the in-database name of this constraint.
     |      
     |      :param deferrable:
     |        Optional bool.  If set, emit DEFERRABLE or NOT DEFERRABLE when
     |        issuing DDL for this constraint.
     |      
     |      :param initially:
     |        Optional string.  If set, emit INITIALLY <value> when issuing DDL
     |        for this constraint.
     |  
     |  __iter__(self)
     |  
     |  __len__(self)
     |  
     |  contains_column(self, col)
     |  
     |  copy(self, **kw)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from ColumnCollectionMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Constraint:
     |  
     |  table
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from SchemaItem:
     |  
     |  __repr__(self)
     |  
     |  get_children(self, **kwargs)
     |      used to allow SchemaVisitor access
     |  
     |  info(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from SchemaItem:
     |  
     |  quote = None
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.events.SchemaEventTarget:
     |  
     |  dispatch = <class 'sqlalchemy.event.DDLEventsDispatch'>
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class VARBINARY(_Binary)
     |  The SQL VARBINARY type.
     |  
     |  Method resolution order:
     |      VARBINARY
     |      _Binary
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'VARBINARY'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from _Binary:
     |  
     |  __init__(self, length=None)
     |  
     |  bind_processor(self, dialect)
     |      # Python 3 - sqlite3 doesn't need the `Binary` conversion
     |      # here, though pg8000 does to indicate "bytea"
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |      # Python 3 has native bytes() type 
     |      # both sqlite3 and pg8000 seem to return it
     |      # (i.e. and not 'memoryview')
     |      # Py2K
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from _Binary:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.
    
    class VARCHAR(String)
     |  The SQL VARCHAR type.
     |  
     |  Method resolution order:
     |      VARCHAR
     |      String
     |      Concatenable
     |      TypeEngine
     |      AbstractType
     |      sqlalchemy.sql.visitors.Visitable
     |      __builtin__.object
     |  
     |  Data and other attributes defined here:
     |  
     |  __visit_name__ = 'VARCHAR'
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from String:
     |  
     |  __init__(self, length=None, convert_unicode=False, assert_unicode=None, unicode_error=None, _warn_on_bytestring=False)
     |      Create a string-holding type.
     |      
     |      :param length: optional, a length for the column for use in
     |        DDL statements.  May be safely omitted if no ``CREATE
     |        TABLE`` will be issued.  Certain databases may require a
     |        ``length`` for use in DDL, and will raise an exception when
     |        the ``CREATE TABLE`` DDL is issued if a ``VARCHAR``
     |        with no length is included.  Whether the value is
     |        interpreted as bytes or characters is database specific.
     |      
     |      :param convert_unicode: When set to ``True``, the 
     |        :class:`.String` type will assume that
     |        input is to be passed as Python ``unicode`` objects,
     |        and results returned as Python ``unicode`` objects.
     |        If the DBAPI in use does not support Python unicode
     |        (which is fewer and fewer these days), SQLAlchemy
     |        will encode/decode the value, using the 
     |        value of the ``encoding`` parameter passed to 
     |        :func:`.create_engine` as the encoding.
     |        
     |        When using a DBAPI that natively supports Python
     |        unicode objects, this flag generally does not 
     |        need to be set.  For columns that are explicitly
     |        intended to store non-ASCII data, the :class:`.Unicode`
     |        or :class:`UnicodeText` 
     |        types should be used regardless, which feature
     |        the same behavior of ``convert_unicode`` but 
     |        also indicate an underlying column type that
     |        directly supports unicode, such as ``NVARCHAR``.
     |      
     |        For the extremely rare case that Python ``unicode``
     |        is to be encoded/decoded by SQLAlchemy on a backend
     |        that does natively support Python ``unicode``,
     |        the value ``force`` can be passed here which will
     |        cause SQLAlchemy's encode/decode services to be
     |        used unconditionally.
     |      
     |      :param assert_unicode: Deprecated.  A warning is emitted 
     |        when a non-``unicode`` object is passed to the 
     |        :class:`.Unicode` subtype of :class:`.String`, 
     |        or the :class:`.UnicodeText` subtype of :class:`.Text`.   
     |        See :class:`.Unicode` for information on how to 
     |        control this warning.
     |      
     |      :param unicode_error: Optional, a method to use to handle Unicode
     |        conversion errors. Behaves like the ``errors`` keyword argument to
     |        the standard library's ``string.decode()`` functions.   This flag
     |        requires that ``convert_unicode`` is set to ``force`` - otherwise,
     |        SQLAlchemy is not guaranteed to handle the task of unicode
     |        conversion.   Note that this flag adds significant performance
     |        overhead to row-fetching operations for backends that already
     |        return unicode objects natively (which most DBAPIs do).  This
     |        flag should only be used as a last resort for reading
     |        strings from a column with varied or corrupted encodings.
     |  
     |  bind_processor(self, dialect)
     |  
     |  get_dbapi_type(self, dbapi)
     |  
     |  result_processor(self, dialect, coltype)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from String:
     |  
     |  python_type
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from Concatenable:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from TypeEngine:
     |  
     |  __repr__(self)
     |  
     |  __str__(self)
     |  
     |  adapt(self, cls, **kw)
     |      Produce an "adapted" form of this type, given an "impl" class 
     |      to work with. 
     |      
     |      This method is used internally to associate generic 
     |      types with "implementation" types that are specific to a particular
     |      dialect.
     |  
     |  compare_values(self, x, y)
     |      Compare two values for equality.
     |  
     |  compile(self, dialect=None)
     |      Produce a string-compiled form of this :class:`.TypeEngine`.
     |      
     |      When called with no arguments, uses a "default" dialect
     |      to produce a string result.
     |      
     |      :param dialect: a :class:`.Dialect` instance.
     |  
     |  copy_value(self, value)
     |  
     |  dialect_impl(self, dialect)
     |      Return a dialect-specific implementation for this :class:`.TypeEngine`.
     |  
     |  is_mutable(self)
     |      Return True if the target Python type is 'mutable'.
     |      
     |      This allows systems like the ORM to know if a column value can
     |      be considered 'not changed' by comparing the identity of
     |      objects alone.  Values such as dicts, lists which
     |      are serialized into strings are examples of "mutable" 
     |      column structures.
     |      
     |      .. note:: 
     |      
     |         This functionality is now superseded by the
     |         ``sqlalchemy.ext.mutable`` extension described in 
     |         :ref:`mutable_toplevel`.
     |      
     |      When this method is overridden, :meth:`copy_value` should
     |      also be supplied.   The :class:`.MutableType` mixin
     |      is recommended as a helper.
     |  
     |  with_variant(self, type_, dialect_name)
     |      Produce a new type object that will utilize the given 
     |      type when applied to the dialect of the given name.
     |      
     |      e.g.::
     |      
     |          from sqlalchemy.types import String
     |          from sqlalchemy.dialects import mysql
     |      
     |          s = String()
     |      
     |          s = s.with_variant(mysql.VARCHAR(collation='foo'), 'mysql')
     |      
     |      The construction of :meth:`.TypeEngine.with_variant` is always
     |      from the "fallback" type to that which is dialect specific.
     |      The returned type is an instance of :class:`.Variant`, which
     |      itself provides a :meth:`~sqlalchemy.types.Variant.with_variant` that can 
     |      be called repeatedly.
     |      
     |      :param type_: a :class:`.TypeEngine` that will be selected
     |       as a variant from the originating type, when a dialect
     |       of the given name is in use.
     |      :param dialect_name: base name of the dialect which uses 
     |       this type. (i.e. ``'postgresql'``, ``'mysql'``, etc.)
     |      
     |      .. versionadded:: 0.7.2
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from sqlalchemy.sql.visitors.Visitable:
     |  
     |  __metaclass__ = <class 'sqlalchemy.sql.visitors.VisitableType'>
     |      Metaclass which assigns a `_compiler_dispatch` method to classes
     |      having a `__visit_name__` attribute.
     |      
     |      The _compiler_dispatch attribute becomes an instance method which
     |      looks approximately like the following::
     |      
     |          def _compiler_dispatch (self, visitor, **kw):
     |              '''Look for an attribute named "visit_" + self.__visit_name__
     |              on the visitor, and call it with the same kw params.'''
     |              return getattr(visitor, 'visit_%s' % self.__visit_name__)(self, **kw)
     |      
     |      Classes having no __visit_name__ attribute will remain unaffected.

FUNCTIONS
    alias(selectable, name=None)
        Return an :class:`.Alias` object.
        
        An :class:`.Alias` represents any :class:`.FromClause`
        with an alternate name assigned within SQL, typically using the ``AS``
        clause when generated, e.g. ``SELECT * FROM table AS aliasname``.
        
        Similar functionality is available via the 
        :meth:`~.FromClause.alias` method
        available on all :class:`.FromClause` subclasses.
        
        When an :class:`.Alias` is created from a :class:`.Table` object,
        this has the effect of the table being rendered
        as ``tablename AS aliasname`` in a SELECT statement.
        
        For :func:`.select` objects, the effect is that of creating a named
        subquery, i.e. ``(select ...) AS aliasname``.
        
        The ``name`` parameter is optional, and provides the name
        to use in the rendered SQL.  If blank, an "anonymous" name
        will be deterministically generated at compile time.
        Deterministic means the name is guaranteed to be unique against
        other constructs used in the same statement, and will also be the
        same name for each successive compilation of the same statement
        object.
        
        :param selectable: any :class:`.FromClause` subclass,
            such as a table, select statement, etc.
        
        :param name: string name to be assigned as the alias.
            If ``None``, a name will be deterministically generated
            at compile time.
    
    and_(*clauses)
        Join a list of clauses together using the ``AND`` operator.
        
        The ``&`` operator is also overloaded on all
        :class:`_CompareMixin` subclasses to produce the
        same result.
    
    asc(column)
        Return an ascending ``ORDER BY`` clause element.
        
        e.g.::
        
          someselect.order_by(asc(table1.mycol))
        
        produces::
        
          ORDER BY mycol ASC
    
    between(ctest, cleft, cright)
        Return a ``BETWEEN`` predicate clause.
        
        Equivalent of SQL ``clausetest BETWEEN clauseleft AND clauseright``.
        
        The :func:`between()` method on all
        :class:`_CompareMixin` subclasses provides
        similar functionality.
    
    bindparam(key, value=None, type_=None, unique=False, required=False, callable_=None)
        Create a bind parameter clause with the given key.
        
        :param key:
          the key for this bind param.  Will be used in the generated
          SQL statement for dialects that use named parameters.  This
          value may be modified when part of a compilation operation,
          if other :class:`_BindParamClause` objects exist with the same
          key, or if its length is too long and truncation is
          required.
        
        :param value:
          Initial value for this bind param.  This value may be
          overridden by the dictionary of parameters sent to statement
          compilation/execution.
        
        :param callable\_:
          A callable function that takes the place of "value".  The function
          will be called at statement execution time to determine the
          ultimate value.   Used for scenarios where the actual bind
          value cannot be determined at the point at which the clause
          construct is created, but embedded bind values are still desirable.
        
        :param type\_:
          A ``TypeEngine`` object that will be used to pre-process the
          value corresponding to this :class:`_BindParamClause` at
          execution time.
        
        :param unique:
          if True, the key name of this BindParamClause will be
          modified if another :class:`_BindParamClause` of the same name
          already has been located within the containing
          :class:`.ClauseElement`.
        
        :param required:
          a value is required at execution time.
    
    case(whens, value=None, else_=None)
        Produce a ``CASE`` statement.
        
        whens
          A sequence of pairs, or alternatively a dict,
          to be translated into "WHEN / THEN" clauses.
        
        value
          Optional for simple case statements, produces
          a column expression as in "CASE <expr> WHEN ..."
        
        else\_
          Optional as well, for case defaults produces
          the "ELSE" portion of the "CASE" statement.
        
        The expressions used for THEN and ELSE,
        when specified as strings, will be interpreted
        as bound values. To specify textual SQL expressions
        for these, use the :func:`literal_column`
        construct. 
        
        The expressions used for the WHEN criterion
        may only be literal strings when "value" is
        present, i.e. CASE table.somecol WHEN "x" THEN "y".
        Otherwise, literal strings are not accepted
        in this position, and either the text(<string>)
        or literal(<string>) constructs must be used to
        interpret raw string values.
        
        Usage examples::
        
          case([(orderline.c.qty > 100, item.c.specialprice),
                (orderline.c.qty > 10, item.c.bulkprice)
              ], else_=item.c.regularprice)
          case(value=emp.c.type, whens={
                  'engineer': emp.c.salary * 1.1,
                  'manager':  emp.c.salary * 3,
              })
        
        Using :func:`literal_column()`, to allow for databases that
        do not support bind parameters in the ``then`` clause.  The type
        can be specified which determines the type of the :func:`case()` construct
        overall::
        
            case([(orderline.c.qty > 100, 
                    literal_column("'greaterthan100'", String)),
                  (orderline.c.qty > 10, literal_column("'greaterthan10'",
                    String))
                ], else_=literal_column("'lethan10'", String))
    
    cast(clause, totype, **kwargs)
        Return a ``CAST`` function.
        
        Equivalent of SQL ``CAST(clause AS totype)``.
        
        Use with a :class:`~sqlalchemy.types.TypeEngine` subclass, i.e::
        
          cast(table.c.unit_price * table.c.qty, Numeric(10,4))
        
        or::
        
          cast(table.c.timestamp, DATE)
    
    collate(expression, collation)
        Return the clause ``expression COLLATE collation``.
        
        e.g.::
        
            collate(mycolumn, 'utf8_bin')
        
        produces::
        
            mycolumn COLLATE utf8_bin
    
    create_engine(*args, **kwargs)
        Create a new :class:`.Engine` instance.
        
        The standard calling form is to send the URL as the 
        first positional argument, usually a string 
        that indicates database dialect and connection arguments.
        Additional keyword arguments may then follow it which
        establish various options on the resulting :class:`.Engine`
        and its underlying :class:`.Dialect` and :class:`.Pool`
        constructs.
        
        The string form of the URL is
        ``dialect+driver://user:password@host/dbname[?key=value..]``, where
        ``dialect`` is a database name such as ``mysql``, ``oracle``, 
        ``postgresql``, etc., and ``driver`` the name of a DBAPI, such as 
        ``psycopg2``, ``pyodbc``, ``cx_oracle``, etc.  Alternatively, 
        the URL can be an instance of :class:`~sqlalchemy.engine.url.URL`.
        
        ``**kwargs`` takes a wide variety of options which are routed 
        towards their appropriate components.  Arguments may be 
        specific to the :class:`.Engine`, the underlying :class:`.Dialect`, as well as the 
        :class:`.Pool`.  Specific dialects also accept keyword arguments that
        are unique to that dialect.   Here, we describe the parameters
        that are common to most :func:`.create_engine()` usage.
        
        Once established, the newly resulting :class:`.Engine` will
        request a connection from the underlying :class:`.Pool` once
        :meth:`.Engine.connect` is called, or a method which depends on it
        such as :meth:`.Engine.execute` is invoked.   The :class:`.Pool` in turn
        will establish the first actual DBAPI connection when this request
        is received.   The :func:`.create_engine` call itself does **not**
        establish any actual DBAPI connections directly.
        
        See also:
        
        :ref:`engines_toplevel`
        
        :ref:`connections_toplevel`
        
        :param assert_unicode:  Deprecated.  This flag
            sets an engine-wide default value for
            the ``assert_unicode`` flag on the 
            :class:`.String` type - see that 
            type for further details.
        
        :param connect_args: a dictionary of options which will be
            passed directly to the DBAPI's ``connect()`` method as
            additional keyword arguments.  See the example
            at :ref:`custom_dbapi_args`.
        
        :param convert_unicode=False: if set to True, sets
            the default behavior of ``convert_unicode`` on the
            :class:`.String` type to ``True``, regardless
            of a setting of ``False`` on an individual 
            :class:`.String` type, thus causing all :class:`.String`
            -based columns
            to accommodate Python ``unicode`` objects.  This flag
            is useful as an engine-wide setting when using a 
            DBAPI that does not natively support Python
            ``unicode`` objects and raises an error when
            one is received (such as pyodbc with FreeTDS).
            
            See :class:`.String` for further details on 
            what this flag indicates.
        
        :param creator: a callable which returns a DBAPI connection.
            This creation function will be passed to the underlying
            connection pool and will be used to create all new database
            connections. Usage of this function causes connection
            parameters specified in the URL argument to be bypassed.
        
        :param echo=False: if True, the Engine will log all statements
            as well as a repr() of their parameter lists to the engines
            logger, which defaults to sys.stdout. The ``echo`` attribute of
            ``Engine`` can be modified at any time to turn logging on and
            off. If set to the string ``"debug"``, result rows will be
            printed to the standard output as well. This flag ultimately
            controls a Python logger; see :ref:`dbengine_logging` for
            information on how to configure logging directly.
        
        :param echo_pool=False: if True, the connection pool will log
            all checkouts/checkins to the logging stream, which defaults to
            sys.stdout. This flag ultimately controls a Python logger; see
            :ref:`dbengine_logging` for information on how to configure logging
            directly.
        
        :param encoding: Defaults to ``utf-8``.  This is the string 
            encoding used by SQLAlchemy for string encode/decode 
            operations which occur within SQLAlchemy, **outside of 
            the DBAPI.**  Most modern DBAPIs feature some degree of 
            direct support for Python ``unicode`` objects,
            what you see in Python 2 as a string of the form
            ``u'some string'``.  For those scenarios where the 
            DBAPI is detected as not supporting a Python ``unicode``
            object, this encoding is used to determine the 
            source/destination encoding.  It is **not used**
            for those cases where the DBAPI handles unicode
            directly.
            
            To properly configure a system to accommodate Python
            ``unicode`` objects, the DBAPI should be 
            configured to handle unicode to the greatest
            degree as is appropriate - see
            the notes on unicode pertaining to the specific
            target database in use at :ref:`dialect_toplevel`. 
            
            Areas where string encoding may need to be accommodated 
            outside of the DBAPI include zero or more of: 
            
            * the values passed to bound parameters, corresponding to 
              the :class:`.Unicode` type or the :class:`.String` type
              when ``convert_unicode`` is ``True``;
            * the values returned in result set columns corresponding 
              to the :class:`.Unicode` type or the :class:`.String` 
              type when ``convert_unicode`` is ``True``;
            * the string SQL statement passed to the DBAPI's 
              ``cursor.execute()`` method; 
            * the string names of the keys in the bound parameter 
              dictionary passed to the DBAPI's ``cursor.execute()`` 
              as well as ``cursor.setinputsizes()`` methods;
            * the string column names retrieved from the DBAPI's 
              ``cursor.description`` attribute.
              
            When using Python 3, the DBAPI is required to support
            *all* of the above values as Python ``unicode`` objects,
            which in Python 3 are just known as ``str``.  In Python 2,
            the DBAPI does not specify unicode behavior at all,
            so SQLAlchemy must make decisions for each of the above
            values on a per-DBAPI basis - implementations are
            completely inconsistent in their behavior.
        
        :param execution_options: Dictionary execution options which will
            be applied to all connections.  See
            :meth:`~sqlalchemy.engine.base.Connection.execution_options`
        
        :param implicit_returning=True: When ``True``, a RETURNING-
            compatible construct, if available, will be used to
            fetch newly generated primary key values when a single row
            INSERT statement is emitted with no existing returning() 
            clause.  This applies to those backends which support RETURNING 
            or a compatible construct, including Postgresql, Firebird, Oracle, 
            Microsoft SQL Server.   Set this to ``False`` to disable
            the automatic usage of RETURNING.
        
        :param label_length=None: optional integer value which limits
            the size of dynamically generated column labels to that many
            characters. If less than 6, labels are generated as
            "_(counter)". If ``None``, the value of
            ``dialect.max_identifier_length`` is used instead.
        
        :param listeners: A list of one or more 
            :class:`~sqlalchemy.interfaces.PoolListener` objects which will 
            receive connection pool events.
        
        :param logging_name:  String identifier which will be used within
            the "name" field of logging records generated within the
            "sqlalchemy.engine" logger. Defaults to a hexstring of the 
            object's id.
        
        :param max_overflow=10: the number of connections to allow in
            connection pool "overflow", that is connections that can be
            opened above and beyond the pool_size setting, which defaults
            to five. this is only used with :class:`~sqlalchemy.pool.QueuePool`.
        
        :param module=None: reference to a Python module object (the module itself, not
            its string name).  Specifies an alternate DBAPI module to be used
            by the engine's dialect.  Each sub-dialect references a specific DBAPI which
            will be imported before first connect.  This parameter causes the
            import to be bypassed, and the given module to be used instead.
            Can be used for testing of DBAPIs as well as to inject "mock"
            DBAPI implementations into the :class:`.Engine`.
        
        :param pool=None: an already-constructed instance of
            :class:`~sqlalchemy.pool.Pool`, such as a
            :class:`~sqlalchemy.pool.QueuePool` instance. If non-None, this
            pool will be used directly as the underlying connection pool
            for the engine, bypassing whatever connection parameters are
            present in the URL argument. For information on constructing
            connection pools manually, see :ref:`pooling_toplevel`.
        
        :param poolclass=None: a :class:`~sqlalchemy.pool.Pool`
            subclass, which will be used to create a connection pool
            instance using the connection parameters given in the URL. Note
            this differs from ``pool`` in that you don't actually
            instantiate the pool in this case, you just indicate what type
            of pool to be used.
        
        :param pool_logging_name:  String identifier which will be used within
           the "name" field of logging records generated within the 
           "sqlalchemy.pool" logger. Defaults to a hexstring of the object's 
           id.
        
        :param pool_size=5: the number of connections to keep open
            inside the connection pool. This used with :class:`~sqlalchemy.pool.QueuePool` as
            well as :class:`~sqlalchemy.pool.SingletonThreadPool`.  With
            :class:`~sqlalchemy.pool.QueuePool`, a ``pool_size`` setting
            of 0 indicates no limit; to disable pooling, set ``poolclass`` to
            :class:`~sqlalchemy.pool.NullPool` instead.
        
        :param pool_recycle=-1: this setting causes the pool to recycle
            connections after the given number of seconds has passed. It
            defaults to -1, or no timeout. For example, setting to 3600
            means connections will be recycled after one hour. Note that
            MySQL in particular will disconnect automatically if no
            activity is detected on a connection for eight hours (although
            this is configurable with the MySQLDB connection itself and the
            server configuration as well).
        
        :param pool_reset_on_return='rollback': set the "reset on return"
            behavior of the pool, which is whether ``rollback()``, 
            ``commit()``, or nothing is called upon connections
            being returned to the pool.  See the docstring for
            ``reset_on_return`` at :class:`.Pool`.
        
            .. versionadded:: 0.7.6
        
        :param pool_timeout=30: number of seconds to wait before giving
            up on getting a connection from the pool. This is only used
            with :class:`~sqlalchemy.pool.QueuePool`.
        
        :param strategy='plain': selects alternate engine implementations.
            Currently available are:
        
            * the ``threadlocal`` strategy, which is described in
              :ref:`threadlocal_strategy`;
            * the ``mock`` strategy, which dispatches all statement
              execution to a function passed as the argument ``executor``.
              See `example in the FAQ <http://www.sqlalchemy.org/trac/wiki/FAQ#HowcanIgettheCREATETABLEDROPTABLEoutputasastring>`_.
        
        :param executor=None: a function taking arguments
            ``(sql, *multiparams, **params)``, to which the ``mock`` strategy will
            dispatch all statement execution. Used only by ``strategy='mock'``.
    
    delete(table, whereclause=None, **kwargs)
        Represent a ``DELETE`` statement via the :class:`.Delete` SQL 
        construct.
        
        Similar functionality is available via the :meth:`~.TableClause.delete` method on
        :class:`~.schema.Table`.
        
        :param table: The table to be updated.
        
        :param whereclause: A :class:`.ClauseElement` describing the ``WHERE``
          condition of the ``UPDATE`` statement. Note that the
          :meth:`~Delete.where()` generative method may be used instead.
        
        See also:
        
            :ref:`deletes` - SQL Expression Tutorial
    
    desc(column)
        Return a descending ``ORDER BY`` clause element.
        
        e.g.::
        
          someselect.order_by(desc(table1.mycol))
        
        produces::
        
            ORDER BY mycol DESC
    
    distinct(expr)
        Return a ``DISTINCT`` clause.
        
        e.g.::
        
            distinct(a)
        
        renders::
        
            DISTINCT a
    
    engine_from_config(configuration, prefix='sqlalchemy.', **kwargs)
        Create a new Engine instance using a configuration dictionary.
        
        The dictionary is typically produced from a config file where keys
        are prefixed, such as sqlalchemy.url, sqlalchemy.echo, etc.  The
        'prefix' argument indicates the prefix to be searched for.
        
        A select set of keyword arguments will be "coerced" to their
        expected type based on string values.  In a future release, this
        functionality will be expanded and include dialect-specific
        arguments.
    
    except_(*selects, **kwargs)
        Return an ``EXCEPT`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    except_all(*selects, **kwargs)
        Return an ``EXCEPT ALL`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    exists(*args, **kwargs)
        Return an ``EXISTS`` clause as applied to a :class:`.Select` object.
        
        Calling styles are of the following forms::
        
            # use on an existing select()
            s = select([table.c.col1]).where(table.c.col2==5)
            s = exists(s)
        
            # construct a select() at once
            exists(['*'], **select_arguments).where(criterion)
        
            # columns argument is optional, generates "EXISTS (SELECT *)"
            # by default.
            exists().where(table.c.col2==5)
    
    extract(field, expr)
        Return the clause ``extract(field FROM expr)``.
    
    insert(table, values=None, inline=False, **kwargs)
        Represent an ``INSERT`` statement via the :class:`.Insert` SQL 
        construct.
        
        Similar functionality is available via the :meth:`~.TableClause.insert` method on
        :class:`~.schema.Table`.
        
        
        :param table: The table to be inserted into.
        
        :param values: A dictionary which specifies the column specifications of
         the ``INSERT``, and is optional. If left as None, the column
         specifications are determined from the bind parameters used during the
         compile phase of the ``INSERT`` statement. If the bind parameters also
         are None during the compile phase, then the column specifications will be
         generated from the full list of table columns. Note that the
         :meth:`~Insert.values()` generative method may also be used for this.
        
        :param prefixes: A list of modifier keywords to be inserted between INSERT
          and INTO. Alternatively, the :meth:`~Insert.prefix_with` generative
          method may be used.
        
        :param inline: if True, SQL defaults will be compiled 'inline' into the
          statement and not pre-executed.
        
        If both `values` and compile-time bind parameters are present, the
        compile-time bind parameters override the information specified
        within `values` on a per-key basis.
        
        The keys within `values` can be either :class:`~sqlalchemy.schema.Column`
        objects or their string identifiers. Each key may reference one of:
        
        * a literal data value (i.e. string, number, etc.);
        * a Column object;
        * a SELECT statement.
        
        If a ``SELECT`` statement is specified which references this
        ``INSERT`` statement's table, the statement will be correlated
        against the ``INSERT`` statement.
        
        See also:
        
            :ref:`coretutorial_insert_expressions` - SQL Expression Tutorial
        
            :ref:`inserts_and_updates` - SQL Expression Tutorial
    
    intersect(*selects, **kwargs)
        Return an ``INTERSECT`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    intersect_all(*selects, **kwargs)
        Return an ``INTERSECT ALL`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    join(left, right, onclause=None, isouter=False)
        Return a ``JOIN`` clause element (regular inner join).
        
        The returned object is an instance of :class:`.Join`.
        
        Similar functionality is also available via the 
        :meth:`~.FromClause.join()` method on any 
        :class:`.FromClause`.
        
        :param left: The left side of the join.
        
        :param right: The right side of the join.
        
        :param onclause:  Optional criterion for the ``ON`` clause, is 
          derived from foreign key relationships established between 
          left and right otherwise.
        
        To chain joins together, use the :meth:`.FromClause.join` or 
        :meth:`.FromClause.outerjoin` methods on the resulting 
        :class:`.Join` object.
    
    literal(value, type_=None)
        Return a literal clause, bound to a bind parameter.
        
        Literal clauses are created automatically when non- :class:`.ClauseElement`
        objects (such as strings, ints, dates, etc.) are used in a comparison
        operation with a :class:`_CompareMixin`
        subclass, such as a :class:`~sqlalchemy.schema.Column` object. Use this function to force the
        generation of a literal clause, which will be created as a
        :class:`_BindParamClause` with a bound value.
        
        :param value: the value to be bound. Can be any Python object supported by
            the underlying DB-API, or is translatable via the given type argument.
        
        :param type\_: an optional :class:`~sqlalchemy.types.TypeEngine` which
            will provide bind-parameter translation for this literal.
    
    literal_column(text, type_=None)
        Return a textual column expression, as would be in the columns
        clause of a ``SELECT`` statement.
        
        The object returned supports further expressions in the same way as any
        other column object, including comparison, math and string operations.
        The type\_ parameter is important to determine proper expression behavior
        (such as, '+' means string concatenation or numerical addition based on
        the type).
        
        :param text: the text of the expression; can be any SQL expression.
          Quoting rules will not be applied. To specify a column-name expression
          which should be subject to quoting rules, use the :func:`column`
          function.
        
        :param type\_: an optional :class:`~sqlalchemy.types.TypeEngine` object which will
          provide result-set translation and additional expression semantics for
          this column. If left as None the type will be NullType.
    
    not_(clause)
        Return a negation of the given clause, i.e. ``NOT(clause)``.
        
        The ``~`` operator is also overloaded on all
        :class:`_CompareMixin` subclasses to produce the
        same result.
    
    null()
        Return a :class:`_Null` object, which compiles to ``NULL``.
    
    or_(*clauses)
        Join a list of clauses together using the ``OR`` operator.
        
        The ``|`` operator is also overloaded on all
        :class:`_CompareMixin` subclasses to produce the
        same result.
    
    outerjoin(left, right, onclause=None)
        Return an ``OUTER JOIN`` clause element.
        
        The returned object is an instance of :class:`.Join`.
        
        Similar functionality is also available via the 
        :meth:`~.FromClause.outerjoin()` method on any 
        :class:`.FromClause`.
        
        :param left: The left side of the join.
        
        :param right: The right side of the join.
        
        :param onclause:  Optional criterion for the ``ON`` clause, is 
          derived from foreign key relationships established between 
          left and right otherwise.
        
        To chain joins together, use the :meth:`.FromClause.join` or 
        :meth:`.FromClause.outerjoin` methods on the resulting 
        :class:`.Join` object.
    
    outparam(key, type_=None)
        Create an 'OUT' parameter for usage in functions (stored procedures),
        for databases which support them.
        
        The ``outparam`` can be used like a regular function parameter.
        The "output" value will be available from the
        :class:`~sqlalchemy.engine.ResultProxy` object via its ``out_parameters``
        attribute, which returns a dictionary containing the values.
    
    over(func, partition_by=None, order_by=None)
        Produce an OVER clause against a function.
        
        Used against aggregate or so-called "window" functions,
        for database backends that support window functions.
        
        E.g.::
        
            from sqlalchemy import over
            over(func.row_number(), order_by='x')
        
        Would produce "ROW_NUMBER() OVER(ORDER BY x)".
        
        :param func: a :class:`.FunctionElement` construct, typically
         generated by :attr:`~.expression.func`.
        :param partition_by: a column element or string, or a list
         of such, that will be used as the PARTITION BY clause
         of the OVER construct.
        :param order_by: a column element or string, or a list
         of such, that will be used as the ORDER BY clause
         of the OVER construct.
        
        This function is also available from the :attr:`~.expression.func`
        construct itself via the :meth:`.FunctionElement.over` method.
        
        .. versionadded:: 0.7
    
    select(columns=None, whereclause=None, from_obj=[], **kwargs)
        Returns a ``SELECT`` clause element.
        
        Similar functionality is also available via the :func:`select()`
        method on any :class:`.FromClause`.
        
        The returned object is an instance of :class:`.Select`.
        
        All arguments which accept :class:`.ClauseElement` arguments also accept
        string arguments, which will be converted as appropriate into
        either :func:`text()` or :func:`literal_column()` constructs.
        
        See also:
        
        :ref:`coretutorial_selecting` - Core Tutorial description of :func:`.select`.
        
        :param columns:
          A list of :class:`.ClauseElement` objects, typically
          :class:`.ColumnElement` objects or subclasses, which will form the
          columns clause of the resulting statement. For all members which are
          instances of :class:`.Selectable`, the individual :class:`.ColumnElement`
          members of the :class:`.Selectable` will be added individually to the
          columns clause. For example, specifying a
          :class:`~sqlalchemy.schema.Table` instance will result in all the
          contained :class:`~sqlalchemy.schema.Column` objects within to be added
          to the columns clause.
        
          This argument is not present on the form of :func:`select()`
          available on :class:`~sqlalchemy.schema.Table`.
        
        :param whereclause:
          A :class:`.ClauseElement` expression which will be used to form the
          ``WHERE`` clause.
        
        :param from_obj:
          A list of :class:`.ClauseElement` objects which will be added to the
          ``FROM`` clause of the resulting statement. Note that "from" objects are
          automatically located within the columns and whereclause ClauseElements.
          Use this parameter to explicitly specify "from" objects which are not
          automatically locatable. This could include
          :class:`~sqlalchemy.schema.Table` objects that aren't otherwise present,
          or :class:`.Join` objects whose presence will supercede that of the
          :class:`~sqlalchemy.schema.Table` objects already located in the other
          clauses.
        
        :param autocommit:
          Deprecated.  Use .execution_options(autocommit=<True|False>)
          to set the autocommit option.
        
        :param bind=None:
          an :class:`~.base.Engine` or :class:`~.base.Connection` instance 
          to which the
          resulting :class:`.Select` object will be bound.  The :class:`.Select`
          object will otherwise automatically bind to whatever
          :class:`~.base.Connectable` instances can be located within its contained
          :class:`.ClauseElement` members.
        
        :param correlate=True:
          indicates that this :class:`.Select` object should have its
          contained :class:`.FromClause` elements "correlated" to an enclosing
          :class:`.Select` object.  This means that any :class:`.ClauseElement`
          instance within the "froms" collection of this :class:`.Select`
          which is also present in the "froms" collection of an
          enclosing select will not be rendered in the ``FROM`` clause
          of this select statement.
        
        :param distinct=False:
          when ``True``, applies a ``DISTINCT`` qualifier to the columns
          clause of the resulting statement.
        
          The boolean argument may also be a column expression or list
          of column expressions - this is a special calling form which
          is understood by the Postgresql dialect to render the
          ``DISTINCT ON (<columns>)`` syntax.
        
          ``distinct`` is also available via the :meth:`~.Select.distinct`
          generative method.
        
          .. note:: 
          
             The ``distinct`` keyword's acceptance of a string
             argument for usage with MySQL is deprecated.  Use
             the ``prefixes`` argument or :meth:`~.Select.prefix_with`.
        
        :param for_update=False:
          when ``True``, applies ``FOR UPDATE`` to the end of the
          resulting statement.  
          
          Certain database dialects also support
          alternate values for this parameter:
          
          * With the MySQL dialect, the value ``"read"`` translates to 
            ``LOCK IN SHARE MODE``.
          * With the Oracle and Postgresql dialects, the value ``"nowait"``
            translates to ``FOR UPDATE NOWAIT``.
          * With the Postgresql dialect, the values "read" and ``"read_nowait"``
            translate to ``FOR SHARE`` and ``FOR SHARE NOWAIT``, respectively.
        
            .. versionadded:: 0.7.7
        
        :param group_by:
          a list of :class:`.ClauseElement` objects which will comprise the
          ``GROUP BY`` clause of the resulting select.
        
        :param having:
          a :class:`.ClauseElement` that will comprise the ``HAVING`` clause
          of the resulting select when ``GROUP BY`` is used.
        
        :param limit=None:
          a numerical value which usually compiles to a ``LIMIT``
          expression in the resulting select.  Databases that don't
          support ``LIMIT`` will attempt to provide similar
          functionality.
        
        :param offset=None:
          a numeric value which usually compiles to an ``OFFSET``
          expression in the resulting select.  Databases that don't
          support ``OFFSET`` will attempt to provide similar
          functionality.
        
        :param order_by:
          a scalar or list of :class:`.ClauseElement` objects which will
          comprise the ``ORDER BY`` clause of the resulting select.
        
        :param prefixes:
          a list of strings or :class:`.ClauseElement` objects to include
          directly after the SELECT keyword in the generated statement,
          for dialect-specific query features.  ``prefixes`` is
          also available via the :meth:`~.Select.prefix_with`
          generative method.
        
        :param use_labels=False:
          when ``True``, the statement will be generated using labels
          for each column in the columns clause, which qualify each
          column with its parent table's (or aliases) name so that name
          conflicts between columns in different tables don't occur.
          The format of the label is <tablename>_<column>.  The "c"
          collection of the resulting :class:`.Select` object will use these
          names as well for targeting column members.
        
          use_labels is also available via the :meth:`~._SelectBase.apply_labels`
          generative method.
    
    subquery(alias, *args, **kwargs)
        Return an :class:`.Alias` object derived 
        from a :class:`.Select`.
        
        name
          alias name
        
        \*args, \**kwargs
        
          all other arguments are delivered to the
          :func:`select` function.
    
    text(text, bind=None, *args, **kwargs)
        Create a SQL construct that is represented by a literal string.
        
        E.g.::
        
            t = text("SELECT * FROM users")
            result = connection.execute(t)
        
        The advantages :func:`text` provides over a plain string are
        backend-neutral support for bind parameters, per-statement
        execution options, as well as 
        bind parameter and result-column typing behavior, allowing 
        SQLAlchemy type constructs to play a role when executing
        a statement that is specified literally.
        
        Bind parameters are specified by name, using the format ``:name``.
        E.g.::
        
            t = text("SELECT * FROM users WHERE id=:user_id")
            result = connection.execute(t, user_id=12)
        
        To invoke SQLAlchemy typing logic for bind parameters, the 
        ``bindparams`` list allows specification of :func:`bindparam`
        constructs which specify the type for a given name::
        
            t = text("SELECT id FROM users WHERE updated_at>:updated",
                        bindparams=[bindparam('updated', DateTime())]
                    )
        
        Typing during result row processing is also an important concern.
        Result column types
        are specified using the ``typemap`` dictionary, where the keys
        match the names of columns.  These names are taken from what
        the DBAPI returns as ``cursor.description``::
        
            t = text("SELECT id, name FROM users",
                    typemap={
                        'id':Integer,
                        'name':Unicode
                    }
            )
        
        The :func:`text` construct is used internally for most cases when
        a literal string is specified for part of a larger query, such as
        within :func:`select()`, :func:`update()`,
        :func:`insert()` or :func:`delete()`.   In those cases, the same
        bind parameter syntax is applied::
        
            s = select([users.c.id, users.c.name]).where("id=:user_id")
            result = connection.execute(s, user_id=12)
        
        Using :func:`text` explicitly usually implies the construction
        of a full, standalone statement.   As such, SQLAlchemy refers
        to it as an :class:`.Executable` object, and it supports
        the :meth:`Executable.execution_options` method.  For example,
        a :func:`text` construct that should be subject to "autocommit"
        can be set explicitly so using the ``autocommit`` option::
        
            t = text("EXEC my_procedural_thing()").\
                    execution_options(autocommit=True)
        
        Note that SQLAlchemy's usual "autocommit" behavior applies to
        :func:`text` constructs - that is, statements which begin
        with a phrase such as ``INSERT``, ``UPDATE``, ``DELETE``, 
        or a variety of other phrases specific to certain backends, will 
        be eligible for autocommit if no transaction is in progress.
        
        :param text:
          the text of the SQL statement to be created.  use ``:<param>``
          to specify bind parameters; they will be compiled to their
          engine-specific format.
        
        :param autocommit:
          Deprecated.  Use .execution_options(autocommit=<True|False>)
          to set the autocommit option.
        
        :param bind:
          an optional connection or engine to be used for this text query.
        
        :param bindparams:
          a list of :func:`bindparam()` instances which can be used to define
          the types and/or initial values for the bind parameters within
          the textual statement; the keynames of the bindparams must match
          those within the text of the statement.  The types will be used
          for pre-processing on bind values.
        
        :param typemap:
          a dictionary mapping the names of columns represented in the
          columns clause of a ``SELECT`` statement  to type objects,
          which will be used to perform post-processing on columns within
          the result set.   This argument applies to any expression 
          that returns result sets.
    
    tuple_(*expr)
        Return a SQL tuple.
        
        Main usage is to produce a composite IN construct::
        
            tuple_(table.c.col1, table.c.col2).in_(
                [(1, 2), (5, 12), (10, 19)]
            )
        
        .. warning::
        
            The composite IN construct is not supported by all backends, 
            and is currently known to work on Postgresql and MySQL,
            but not SQLite.   Unsupported backends will raise
            a subclass of :class:`~sqlalchemy.exc.DBAPIError` when such 
            an expression is invoked.
    
    type_coerce(expr, type_)
        Coerce the given expression into the given type, on the Python side only.
        
        :func:`.type_coerce` is roughly similar to :func:`.cast`, except no
        "CAST" expression is rendered - the given type is only applied towards
        expression typing and against received result values.
        
        e.g.::
        
            from sqlalchemy.types import TypeDecorator
            import uuid
        
            class AsGuid(TypeDecorator):
                impl = String
        
                def process_bind_param(self, value, dialect):
                    if value is not None:
                        return str(value)
                    else:
                        return None
        
                def process_result_value(self, value, dialect):
                    if value is not None:
                        return uuid.UUID(value)
                    else:
                        return None
        
            conn.execute(
                select([type_coerce(mytable.c.ident, AsGuid)]).\
                        where(
                            type_coerce(mytable.c.ident, AsGuid) == 
                            uuid.uuid3(uuid.NAMESPACE_URL, 'bar')
                        )
            )
    
    union(*selects, **kwargs)
        Return a ``UNION`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        A similar :func:`union()` method is available on all
        :class:`.FromClause` subclasses.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
           available keyword arguments are the same as those of
           :func:`select`.
    
    union_all(*selects, **kwargs)
        Return a ``UNION ALL`` of multiple selectables.
        
        The returned object is an instance of
        :class:`.CompoundSelect`.
        
        A similar :func:`union_all()` method is available on all
        :class:`.FromClause` subclasses.
        
        \*selects
          a list of :class:`.Select` instances.
        
        \**kwargs
          available keyword arguments are the same as those of
          :func:`select`.
    
    update(table, whereclause=None, values=None, inline=False, **kwargs)
        Represent an ``UPDATE`` statement via the :class:`.Update` SQL 
        construct.
        
        E.g.::
        
            from sqlalchemy import update
            
            stmt = update(users).where(users.c.id==5).\
                    values(name='user #5')
        
        Similar functionality is available via the :meth:`~.TableClause.update` method on
        :class:`.Table`::
        
            
            stmt = users.update().\
                        where(users.c.id==5).\
                        values(name='user #5')
        
        :param table: A :class:`.Table` object representing the database
         table to be updated.
        
        :param whereclause: Optional SQL expression describing the ``WHERE``
         condition of the ``UPDATE`` statement.   Modern applications
         may prefer to use the generative :meth:`~Update.where()` 
         method to specify the ``WHERE`` clause.
         
         The WHERE clause can refer to multiple tables.
         For databases which support this, an ``UPDATE FROM`` clause will
         be generated, or on MySQL, a multi-table update.  The statement 
         will fail on databases that don't have support for multi-table
         update statements.  A SQL-standard method of referring to
         additional tables in the WHERE clause is to use a correlated
         subquery::
         
            users.update().values(name='ed').where(
                    users.c.name==select([addresses.c.email_address]).\
                                where(addresses.c.user_id==users.c.id).\
                                as_scalar()
                    )
        
         .. versionchanged:: 0.7.4
             The WHERE clause can refer to multiple tables.
        
        :param values:
          Optional dictionary which specifies the ``SET`` conditions of the
          ``UPDATE``.  If left as ``None``, the ``SET``
          conditions are determined from those parameters passed to the 
          statement during the execution and/or compilation of the 
          statement.   When compiled standalone without any parameters,
          the ``SET`` clause generates for all columns.
          
          Modern applications may prefer to use the generative 
          :meth:`.Update.values` method to set the values of the 
          UPDATE statement.
        
        :param inline:
          if True, SQL defaults present on :class:`.Column` objects via 
          the ``default`` keyword will be compiled 'inline' into the statement
          and not pre-executed.  This means that their values will not
          be available in the dictionary returned from 
          :meth:`.ResultProxy.last_updated_params`.
        
        If both ``values`` and compile-time bind parameters are present, the
        compile-time bind parameters override the information specified
        within ``values`` on a per-key basis.
        
        The keys within ``values`` can be either :class:`.Column`
        objects or their string identifiers (specifically the "key" of the
        :class:`.Column`, normally but not necessarily equivalent to
        its "name").  Normally, the
        :class:`.Column` objects used here are expected to be
        part of the target :class:`.Table` that is the table 
        to be updated.  However when using MySQL, a multiple-table
        UPDATE statement can refer to columns from any of
        the tables referred to in the WHERE clause.
        
        The values referred to in ``values`` are typically:
        
        * a literal data value (i.e. string, number, etc.)
        * a SQL expression, such as a related :class:`.Column`,
          a scalar-returning :func:`.select` construct, 
          etc.
        
        When combining :func:`.select` constructs within the values
        clause of an :func:`.update` construct,
        the subquery represented by the :func:`.select` should be 
        *correlated* to the parent table, that is, providing criterion
        which links the table inside the subquery to the outer table
        being updated::
        
            users.update().values(
                    name=select([addresses.c.email_address]).\
                            where(addresses.c.user_id==users.c.id).\
                            as_scalar()
                )
        
        See also:
        
            :ref:`inserts_and_updates` - SQL Expression 
            Language Tutorial

DATA
    __all__ = ['BIGINT', 'BINARY', 'BLOB', 'BOOLEAN', 'BigInteger', 'Binar...
    __version__ = '0.7.8'
    func = <sqlalchemy.sql.expression._FunctionGenerator object>
    modifier = <sqlalchemy.sql.expression._FunctionGenerator object>

VERSION
    0.7.8


